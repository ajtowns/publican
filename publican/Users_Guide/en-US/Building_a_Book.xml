<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<section id="sect-Users_Guide-Building_a_document">
	<title>Building a document</title>
	<para>
		To build a document:
	</para>
	<procedure>
		<step>
			<para>
				Confirm the <parameter>YEAR</parameter> and <parameter>HOLDER</parameter> entities have been configured in the <filename><replaceable>Doc_Name</replaceable>.ent</filename> file, as described in <xref linkend="sect-Users_Guide-Files_in_the_book_directory-Doc_Name.ent" />.
			</para>
		</step>
		<step>
			<para>
				Change into the root directory of the document. For example, if the document was named <literal>Test_Book</literal> and was located in the <filename>books/</filename> directory, run the following command:
			</para>
			<para>
				
<screen><command>cd books/Test_Book</command>
</screen>
			</para>
		</step>
		<step>
			<para>
				Run a test for any errors that would stop the book from building in your chosen language, for example:
			</para>
			<para>
				
<screen><command>publican build --formats=test --langs=en-US</command>
</screen>
			</para>
		</step>
		<step>
			<para>
				Run the following command to build the book:
			</para>
			<para>
				
<screen><command>publican build --formats=<replaceable>formats</replaceable> --langs=<replaceable>languages</replaceable></command>
</screen>
			</para>
			<para>
				Replace <replaceable>formats</replaceable> with a comma-separated list of the formats that you want to build, for example, <literal>--formats=html,html-single,pdf</literal>. Replace <replaceable>langs</replaceable> with a comma-separated list of the languages that you want to build, for example, <literal>--langs=en-US,sv-SE,uk-UA,ko-KR</literal>.
			</para>
		</step>
	</procedure>

	<variablelist>
		<title>Formats for the <command>build</command> action</title>
		<varlistentry>
			<term><option>html</option></term>
			<listitem>
				<para>
					<application>Publican</application> outputs the document as in multiple HTML pages, with each chapter and major section on a separate page. <application>Publican</application> places an index at the start of the document, and places navigational elements on each page.
				</para>
				<para>
					Use the <parameter>chunk_first</parameter> and <parameter>chunk_section depth</parameter> parameters in the <filename>publican.cfg</filename> file to control how how <application>Publican</application> chunks sections in this format.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term><option>html-single</option></term>
			<listitem>
				<para>
					<application>Publican</application> outputs the document as a single HTML page with the table of contents near the top of the page.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term><option>html-desktop</option></term>
			<listitem>
				<para>
					<application>Publican</application> outputs the document as a single HTML page with the table of contents located in a separate pane on the left side of the document.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term><option>pdf</option></term>
			<listitem>
				<para>
					<application>Publican</application> outputs the document as a PDF file.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term><option>txt</option></term>
			<listitem>
				<para>
					<application>Publican</application> outputs the document as a single text file.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term><option>epub</option></term>
			<listitem>
				<para>
					<application>Publican</application> outputs the document as an e-book in EPUB format.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>

	<para>
		The following examples demonstrate commonly used <command>publican build</command> commands:
	</para>
	<variablelist>
		<varlistentry>
			<term><command>publican build --help</command></term>
			<listitem>
				<para>
					List available <command>publican build</command> options for building a book.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term><command>publican build --formats=test --langs=<replaceable>languages</replaceable></command></term>
			<listitem>
				<para>
					Check that the book can be built correctly. Build <command>--formats=test</command> before running any other <command>publican build</command> command, and before checking a book back into a version-controlled repository from which other contributors might download it.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term><command>publican build --formats=html --langs=<replaceable>languages</replaceable></command></term>
			<listitem>
				<para>
					Build the book in multi-page HTML format. The HTML output will be located in the <filename><replaceable>Doc_Name</replaceable>/tmp/<replaceable>language</replaceable>/html/</filename> directory. Each chapter and major section is placed in a separate HTML file. You can control the depth at which <application>Publican</application> places subsections into separate HTML files with the <literal>chunk-section-depth</literal> parameter in the <filename>publican.cfg</filename> â€” refer to <xref linkend="sect-Users_Guide-Files_in_the_book_directory-The_publican.cfg_file" />.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term><command>publican build --formats=html-single --langs=<replaceable>languages</replaceable></command></term>
			<listitem>
				<para>
					Build the book in single-page HTML format. The output will be a single HTML file located in the <filename><replaceable>Doc_Name</replaceable>/tmp/<replaceable>language</replaceable>/html-single/</filename> directory.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term><command>publican build --formats=pdf --langs=<replaceable>languages</replaceable></command></term>
			<listitem>
				<para>
					Build the book as a PDF file. <application>Publican</application> relies on an external application, <application>FOP</application> to render PDF. Therefore, building PDF might not be available on all systems, depending on the availability of <application>FOP</application>. The output will be a single PDF file located in the <filename><replaceable>Doc_Name</replaceable>/tmp/<replaceable>language</replaceable>/pdf/</filename> directory.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term><command>publican build --formats=html,html-single,pdf --langs=<replaceable>languages</replaceable></command></term>
			<listitem>
				<para>
					Build the book in multi-page HTML, single-page HTML, and PDF formats.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<section id="sect-Users_Guide-Building_a_document-Building_a_document_created_with_Publican_0">
		<title>Building a document created with Publican 0</title>
		<para>
			Documents produced with early versions of <application>Publican</application> (versions up to and including 0.45) did not have a <filename>publican.cfg</filename> file; a similar set of parameters was defined in a <filename>Makefile</filename>. Before you build such a document in a current version of <application>Publican</application> (version 0.99 onwards), you must convert the <filename>Makefile</filename> into a <filename>publican.cfg</filename> file. <application>Publican</application> can do this conversion automatically:
		</para>
		<procedure>
			<step>
				<para>
					Change into the document directory, the one that holds the <filename>Makefile</filename>.
				</para>
			</step>
			<step>
				<para>
					Run <command>publican old2new</command>. <application>Publican</application> parses the <filename>Makefile</filename> and creates a <filename>publican.cfg</filename> file with equivalent parameters wherever available.
				</para>
			</step>
		</procedure>
		
		<para>
			When you run <command>publican old2new</command>, <application>Publican</application> does not alter or delete the original <filename>Makefile</filename>. A <filename>Makefile</filename> and a <filename>publican.cfg</filename> file can coexist in the same document.
		</para>
	</section>

</section>


