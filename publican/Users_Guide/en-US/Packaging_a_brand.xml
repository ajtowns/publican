<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Users_Guide.ent">
%BOOK_ENTITIES;
]>
<section id="sect-Users_Guide-Packaging_a_brand">
	<title>Packaging a brand</title>
	<xi:include href="Applicable_to_RPM_only.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
	<para>
		After you create a brand (as described in <xref linkend="sect-Users_Guide-Creating_a_brand" />), <application>Publican</application> can help you to distribute the brand to members of your documentation project as <firstterm>RPM packages</firstterm>. RPM packages are used to distribute software to computers with Linux operating systems that use the <application>RPM Package Manager</application>. These operating systems include Red Hat Enterprise Linux, Fedora, Mandriva Linux, SUSE Linux Enterprise, openSUSE, Turbolinux, and Yellow Dog Linux, to name just a few.
	</para>
	<para>
		<application>Publican</application> can produce both <firstterm>source RPM packages</firstterm> (<firstterm>SRPM packages</firstterm>) and <firstterm>binary RPM packages</firstterm>. As part of this process, it also creates the <firstterm>spec file</firstterm> — the file that contains the details of how a package is configured and installed.
	</para>
	<para>
		An SRPM package contains the source code used to generate software rather than the software itself. To use an SRPM package, a computer must <firstterm>compile</firstterm> the source code into software. SRPM packages of <application>Publican</application> brands contain the configuration files, XML files, and image files that define the brand in its original language, plus the PO files that generate the Common Content files in translated languages. To install a brand from its SRPM package to a computer, the computer must have <application>Publican</application> installed on it. When you try to install the SRPM package on a computer that does not have <application>Publican</application> installed, the <application>RPM Package Manager</application> looks for <application>Publican</application> in the software repositories that are available to it. The <application>RPM Package Manager</application> installs <application>Publican</application> first, so that it can build and install the brand contained in the SRPM package. If the <application>RPM Package Manager</application> cannot find and install <application>Publican</application>, installation of the SRPM package will fail.
	</para>
	<para>
		Conversely, binary RPM packages contain software — in this case, a <application>Publican</application> brand — that is ready to copy to a location in the computer's file system and use immediately. The contents of the binary RPM package do not need to be compiled by the computer onto which they are installed, and therefore, the computer does not need to have <application>Publican</application> installed.
	</para>
	<para>
		To package a brand, use the <command>publican package</command> command in the brand directory. When used without any further options, <application>Publican</application> produces an SRPM package. The options for packaging a brand are as follows:
	</para>
	<variablelist>
		<varlistentry>
			<term><option>--binary</option></term>
			<listitem>
				<para>
					specifies that <application>Publican</application> should build the package as a binary RPM package.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term><option>--brew</option></term>
			<listitem>
				<para>
					specifies that <application>Publican</application> should push the completed package to <application>Brew</application>. <application>Brew</application> is the build system used internally by Red Hat; this option is meaningless outside Red Hat.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term><option>--scratch</option></term>
			<listitem>
				<para>
					when used together with the <option>--brew</option> option, specifies that a SRPM package should be built as a <firstterm>scratch build</firstterm> when sent to <application>Brew</application>. Scratch builds are used to verify that a SRPM package is structured correctly, without updating the package database to use the resulting package.
				</para>
			</listitem>
		</varlistentry>
	</variablelist>
	<para>
		The <option>--lang</option>, <option>--desktop</option> and <option>--short_sighted</option> options that apply when you package books (described in <xref linkend="sect-Users_Guide-Packaging_a_book" />) are meaningless when you package brands. In particular, note that although the <option>--lang</option> option is mandatory when you package a book, you do not need to use it when you package a brand.
	</para>
	<para>
		By default, <application>Publican</application> brand packages are named <filename>publican-<replaceable>brand</replaceable>-<replaceable>version</replaceable>-<replaceable>release</replaceable>.<replaceable>[build_target]</replaceable>.[noarch].<replaceable>file_extension</replaceable></filename>. <application>Publican</application> uses the information in the <filename>publican.cfg</filename> file to supply the various parameters in the file name. Refer to <xref linkend="sect-Users_Guide-Files_in_the_brand_directory-The_publican.cfg_file" /> for details of configuring this file. Additionally: 
		<itemizedlist>
			<listitem>
				<para>
					SRPM packages have the file extension <literal>.src.rpm</literal> but binary RPM packages have the file extension <literal>.rpm</literal>
				</para>
			</listitem>
			<listitem>
				<para>
					binary RPM packages include <literal><replaceable>[build_target]</replaceable>.noarch</literal> before the file extension, where <replaceable>[build_target]</replaceable> represents the operating system and version that the package is built for as set by the <parameter>os_ver</parameter> parameter in the <filename>publican.cfg</filename> file. The <literal>noarch</literal> element specifies that the package can be installed on any system, regardless of the system architecture.
				</para>
			</listitem>
		</itemizedlist>
	</para>
</section>


