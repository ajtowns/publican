<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Users_Guide.ent">
%BOOK_ENTITIES;
]>
<section conformance="231" id="sect-Users_Guide-Website-structure-cfg_and_db-manual">
	<title>Creating the website structure</title>

	<para>
		To build the website structure:
	</para>
	<procedure>
		<step>
			<para>
				On your workstation, create a new directory and change into it. For example, on a Linux system, run:
			</para>
<screen><prompt>$</prompt> <command>mkdir ~/docsite</command>
<prompt>$</prompt> <command>cd ~/docsite</command></screen>
		</step>
		<step>
			<para>
				Run <prompt>$</prompt> <command>publican create_site</command>, specifying the following parameters:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<option>--site_config</option> — the name of the configuration file for your site, with the filename extension <filename>.cfg</filename>
					</para>
				</listitem>
				<listitem>
					<para>
						<option>--db_file</option> — the name of the SQLite database file for your site, with the filename extension <filename>.db</filename>
					</para>
				</listitem>
				<listitem>
					<para>
						<option>--toc_path</option> — the path to the directory in which you will place your documents
					</para>
				</listitem>
			</itemizedlist>
			<para>
				On a computer with an operating system other than Linux, also set:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<option>--tmpl_path</option> — the path to the <filename>templates/</filename> directory of your <application>Publican</application> installation. On computers with Windows operating systems, this is typically <filename><replaceable>%SystemDrive%</replaceable>\<replaceable>%ProgramFiles%</replaceable>\Publican\templates</filename>.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				For example:
			</para>
<screen><prompt>$</prompt> <prompt>$</prompt> <command>publican create_site --site_config foomaster.cfg --db_file foomaster.db --toc_path html/docs</command></screen>
			<para>
				You might give names to the site configuration file and database file that help you to recognize the site to which they belong. For example, for the <application>FooMaster</application> documentation site, you might call these files <filename>foomaster.cfg</filename> and <filename>foomaster.db</filename>. You can set <parameter>--toc_path</parameter> to whatever you choose.
			</para>
		</step>
		<step>
			<para>
				Edit the site configuration file to specify the name of the site, the web host, and optionally, search parameters, default language, dump file settings, and update settings for the site:
			</para>
			<substeps>
				<step>
					<para>
						Specify the title with the <parameter>title</parameter> parameter, for example:
					</para>
<programlisting>title: "Foomaster Documentation"</programlisting>
					<para>
						Normally, visitors to your website do not see this title because the site's JavaScript redirects them to a homepage. However, this title is likely to be found and indexed by search engines. 
					</para>
				</step>
				<step>
					<para>
						Specify the web host with the <parameter>host</parameter> parameter as a full URL, including the protocol (for example, <literal>http://</literal>). For example:
					</para>
<programlisting>host: http://docs.example.com</programlisting>
					<para>
						<application>Publican</application> uses the value set for <parameter>host</parameter> to construct the URLs in the XML <filename>Sitemap</filename> that it creates for search engine crawlers, and to limit searches submitted through the search box in the navigation menu to results on your site only.
					</para>
				</step>
				<step>
					<para>
						Optionally, construct a search engine query to use with the search box in the navigation menu and specify the entire content of a HTML <sgmltag>&lt;form&gt;</sgmltag> with the <parameter>search</parameter> parameter. If you do not specify a custom web search, <application>Publican</application> creates a Google search limited to the host that you specified in the <parameter>host</parameter> parameter. 
					</para>
					<para>
						For example, to construct a Yahoo! search limited to <literal>docs.example.com</literal>, set:
					</para>
<programlisting language="HTML">search: '&lt;form target="_top" method="get" action="http://search.yahoo.com/search"&gt; &lt;div class="search"&gt; &lt;input type="text" name="p" value="" /&gt; &lt;input type="hidden" name="vs" value="docs.example.com" /&gt; &lt;input type="submit" value="###Search###" /&gt; &lt;/div&gt; &lt;/form&gt;'</programlisting>
					<para>
						Refer to the documentation of your chosen search engine for details of how to construct custom searches. 
					</para>
					<para>
						If you set <literal>value="###Search###"</literal> in the code for a submit button, <application>Publican</application> uses the word <literal>Search</literal> on the button, localized into any language that <application>Publican</application> supports. 
					</para>
					<important>
						<title>Important — the search parameter is not validated</title>
						<para>
							<application>Publican</application> does not validate the <parameter>search</parameter> parameter, but builds the value of this parameter into the navigation menu exactly as you specify it. Be especially careful when you use this feature.
						</para>
					</important>
				</step>	
				<step>
					<para>
						Optionally, set the default language of the website. <application>Publican</application> creates a separate, translatable navigation menu for each language in which you publish documentation. However, if a document is not available in a particular language, <application>Publican</application> links visitors to the untranslated version of that document. To specify the default, untranslated language for the site, set <parameter>def_lang</parameter> with a language code. For example:
					</para>
<programlisting>def_lang: fr-FR</programlisting>
					<para>
						With <parameter>def_lang</parameter> set to <literal>fr-FR</literal>, visitors viewing the navigation menu in (for example) Spanish are presented with a link to the original French version of the document if the document has not yet been translated into Spanish.
					</para>
				</step>
				<step>
					<para>
						Optionally, configure a <firstterm>dump file</firstterm> for the website. <application>Publican</application> can output an XML file that provides complete site content details for delivery of other services, such as web feeds or customised search pages. The file is updated whenever a book is installed or removed from the site, or the <prompt>$</prompt> <command>publican update_site</command> command is run. Configure the <parameter>dump</parameter>, <parameter>dump_file</parameter>, and <parameter>zip_dump</parameter> parameters as follows:
					</para>
					<variablelist>
						<varlistentry>
							<term><parameter>dump</parameter></term>
							<listitem>
								<para>
									Set <literal>dump: 1</literal> to enable the dump file function. This parameter defaults to <literal>0</literal> (off).
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term><parameter>dump_file</parameter></term>
							<listitem>
								<para>
									Set <literal>dump_file: <replaceable>name</replaceable></literal> to specify the name of the dump file and the directory in which <application>Publican</application> stores it. This parameter defaults to <literal>/var/www/html/DUMP.xml</literal>.
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term><parameter>zip_dump</parameter></term>
							<listitem>
								<para>
									Set <literal>zip_dump: 1</literal> to specify that <application>Publican</application> should create a zipped version of the XML file together with the XML version. This parameter defaults to <literal>0</literal> (off).
								</para>
							</listitem>
						</varlistentry>
					</variablelist>
					<para>
						Refer to <xref linkend="dump_file" /> for a description of the contents of the dump file.
					</para>
				</step>
				<step>
					<para>
						Optionally, specify that the site tables of contents will be updated manually with the <parameter>manual_toc_update</parameter> parameter, for example:
					</para>
<programlisting>manual_toc_update: 1</programlisting>
					<para>
						Normally, <application>Publican</application> updates the site's tables of contents every time a documentation package is added or removed. On a site with a large number of documents on it (more than a few hundred), or where documents are updated very frequently (dozens of updates per week), this process is very demanding on a server. On a large or busy site, we recommend that you set this parameter and then periodically update the tables of contents with the <prompt>$</prompt> <command>publican update_site</command> command. 
					</para>
				</step>
				<step>
					<para>
						Optionally, override the default JavaScript for the site with the <parameter>toc_js</parameter> parameter, for example:
					</para>
<programlisting>toc_js: "mybrand/scripts/megafoo.js"</programlisting>
					<para>
						This file will be symlinked as <parameter>toc_path</parameter>/toc.js with the <prompt>$</prompt> <command>publican update_site</command> command. This path should be relative to the <parameter>toc_path</parameter> parameter.
					</para>
				</step>
			</substeps>
		</step>
		<step>
			<para>
			  Create an empty file named <filename>site_overrides.css</filename> in the directory that you specified with <option>doc_path</option> (the directory that contains <filename>interactive.css</filename> and the various language directories). If you want to use site-specific styles to override those provided by <filename>interactive.css</filename>, you can add a <filename>site_overrides.css</filename> to the document that provides the site <firstterm>home page</firstterm> — refer to <xref linkend="sect-Users_Guide-Website-homepage-manual" />. If you do not want to use site-specific styles, the empty file you add here will prevent 404 errors on your server. On a Linux system, change into the directory that you specified with <option>doc_path</option> and run: 
			</para>
<screen><prompt>$</prompt> <command>touch site_overrides.css</command></screen>
		</step>
		<step>
			<para>
				Build and install each brand, including the <application>Publican</application> <literal>common</literal> brand.
			</para>
			<substeps>
				<step>
					<para>
						Change into the directory that holds the source for the brand.
					</para>
	
					<screen><prompt>$</prompt><prompt>$</prompt> <command>cd</command> <replaceable>brandsrc_dir</replaceable></screen>
					
				</step>
				<step>
					<para>
						Build the brand.
					</para>
					<screen><prompt>$</prompt><prompt>$</prompt> <command>publican build --formats=xml --langs=all --publish</command></screen>
					
				</step>
				<step>
					<para>
						Install the brand on your website.
					</para>
					<screen><prompt>$</prompt><prompt>$</prompt> <command>publican install_brand --web --path=</command><replaceable>path_to_site_root_dir</replaceable></screen>
					<para>
						Perform these steps for all brands.
					</para>
				</step>
			</substeps>
		</step>
		<step>
			<para>
				Update the site.
			</para>
			<screen><prompt>$</prompt><prompt>$</prompt> <command>publican update_site</command></screen>
		</step>
	</procedure>
	<para>
		To make <application>Publican</application> refresh the site structure at any time, run: 
	</para>
<screen><prompt>$</prompt> <prompt>$</prompt> <command>publican update_site --site_config <replaceable>path_to_site_configuration_file</replaceable>.cfg</command></screen>
</section>
