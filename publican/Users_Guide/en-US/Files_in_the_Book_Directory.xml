<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<section id="sect-Users_Guide-Files_in_the_book_directory">
	<title>Files in the book directory</title>
	<para>
		If you run the command <command>publican create --name Test_Book --lang en-US</command>, <application>Publican</application> creates a directory structure and required files, similar to the following:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				<filename>publican.cfg</filename>
			</para>
		</listitem>
		<listitem>
			<para>
				<filename>en-US</filename> (directory)
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<filename>Test_Book.xml</filename>
					</para>
				</listitem>
				<listitem>
					<para>
						<filename>Test_Book.ent</filename>
					</para>
				</listitem>
				<listitem>
					<para>
						<filename>Revision_History.xml</filename>
					</para>
				</listitem>
				<listitem>
					<para>
						<filename>Preface.xml</filename>
					</para>
				</listitem>
				<listitem>
					<para>
						<filename>Chapter.xml</filename>
					</para>
				</listitem>
				<listitem>
					<para>
						<filename>Book_Info.xml</filename>
					</para>
				</listitem>
				<listitem>
					<para>
						<filename>Author_Group.xml</filename>
					</para>
				</listitem>
				<listitem>
					<para>
						<filename>images</filename> (directory)
					</para>
					<itemizedlist>
						<listitem>
							<para>
								<filename>icon.svg</filename>
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
		</listitem>
	</itemizedlist>
	<section id="sect-Users_Guide-Files_in_the_book_directory-The_publican.cfg_file">
		<title>The publican.cfg file</title>
		<para>
			The <filename>publican.cfg</filename> file configures build options, and is located in the root of the book directory. The following is an example <filename>publican.cfg</filename> file, with a description of <filename>publican.cfg</filename> parameters following afterwards:
		</para>
		
<programlisting><xi:include href="extras/publican.cfg" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
		<variablelist id="vari-Users_Guide-The_publican.cfg_file-Default_parameters">
			<title>Default parameters</title>
			<varlistentry>
				<term><parameter>xml_lang</parameter></term>
				<listitem>
					<para>
						specifies the language of the source XML files, for example, <literal>en-US</literal>, as set by the <option>--lang</option> option for <command>publican create</command>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>type</parameter></term>
				<listitem>
					<para>
						specifies the type of document — a DocBook <sgmltag>&#60;article&#62;</sgmltag>, DocBook <sgmltag>&#60;book&#62;</sgmltag>, or DocBook <sgmltag>&#60;set&#62;</sgmltag>, as set by the <option>--type</option> option for <command>publican create</command>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>brand</parameter></term>
				<listitem>
					<para>
						sets the <firstterm>brand</firstterm> of the document, for example, <computeroutput>RedHat</computeroutput>, <computeroutput>fedora</computeroutput>, <computeroutput>JBoss</computeroutput>, <computeroutput>oVirt</computeroutput> or <computeroutput>GIMP</computeroutput> , as set by the <option>--brand</option> option for <command>publican create</command>. If you do not specify a brand, <application>Publican</application> uses its default brand. Refer to <xref linkend="chap-Users_Guide-Branding" /> for more information.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<variablelist id="vari-Users_Guide-The_publican.cfg_file-Advanced_parameters">
			<title>Advanced parameters</title>
			<varlistentry>
				<term><parameter>arch</parameter></term>
				<listitem>
					<para>
						filters output by computer <firstterm>architecture</firstterm>. For example, if you set <literal>arch: x86_64</literal> in the <filename>publican.cfg</filename> file, <application>Publican</application> will only include XML elements tagged with the equivalent attribute, such as <sgmltag>&#60;para arch=&#34;x86_64&#34;&#62;</sgmltag>.
					</para>
					<warning>
						<title>Use with caution</title>
						<para>
							As with conditional tagging more generally, <literal>arch</literal> can cause great difficulties when translating documents. Refer to <xref linkend="sect-Users_Guide-Conditional_tagging-Conditional_tagging_and_translation" /> for an explanation of the issues.
						</para>
					</warning>
					<important>
						<title>arch set for root nodes</title>
						<para>
							If the root node of an XML file is excluded by the <parameter>arch</parameter> attribute, your document will not build, because empty files are not valid XML. For example, if <filename>Installation_and_configuration-PPC.xml</filename> contains a single chapter:
						</para>
						
<programlisting>
&#60;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39; ?&#62;
&#60;!DOCTYPE chapter PUBLIC &#34;-//OASIS//DTD DocBook XML V4.5//EN&#34; &#34;http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd&#34; [
]&#62;
&#60;chapter id=&#34;chap-Installation_and_configuration_on_PowerPC&#34; arch=&#34;PowerPC&#34;&#62;
&#60;title&#62;Installation and configuration on PowerPC&#60;/title&#62;

[text of chapter]

&#60;/chapter&#62;
</programlisting>
						<para>
							and this chapter is included in <filename>User_Guide.xml</filename> with an <sgmltag>&#60;xi:include&#62;</sgmltag> tag, the document will not build with <command>condition: x86</command> set in the <filename>publican.cfg</filename> file.
						</para>
						<para>
							To exclude this chapter, add the <parameter>arch</parameter> attribute to the <sgmltag>&#60;xi:include&#62;</sgmltag> tag in <filename>User_Guide.xml</filename>, not to the <sgmltag>&#60;chapter&#62;</sgmltag> tag in <filename>Installation_and_configuration-PPC.xml</filename>.
						</para>
					</important>
					<important>
						<title>xrefs and the arch attribute</title>
						<para>
							If an <sgmltag>&#60;xref&#62;</sgmltag> points to content not included in the build due to the <parameter>arch</parameter> attribute, the build will fail. For example, with <literal>arch: x86</literal> set in the <filename>publican.cfg</filename> file, <command>publican build --formats=pdf --langs=en-US</command> will fail if the book has the tag <sgmltag>&#60;xref linkend=&#34;Itanium_installation&#34;&#62;</sgmltag> pointing to <sgmltag>&#60;section id=&#34;Itanium_installation&#34; arch=&#34;IA64&#34;&#62;</sgmltag>.
						</para>
					</important>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>books</parameter></term>
				<listitem>
					<para>
						specifies a space-separated list of books used in a remote set. Refer to <xref linkend="sect-Users_Guide-Using_sets-Distributed_sets" /> for more information on distributed sets.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>brew_dist</parameter></term>
				<listitem>
					<para>
						specifies the build target to use for building the desktop RPM package in <application>Brew</application>, Red Hat&#39;s internal build system. This parameter defaults to <literal>docs-5E</literal>. Refer to <xref linkend="sect-Users_Guide-Packaging_a_book-The_publican_package_command" /> and <xref linkend="sect-Users_Guide-Packaging_a_brand" /> for more information on building RPM packages.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>catalogs</parameter></term>
				<listitem>
					<para>
						sets the path to the DocBook catalog files. The default location on a computer with a Linux operating system is <filename>/usr/share/publican/xsl</filename>. On a computer with a Windows operating system, the default location is <filename>%SystemDrive%/%ProgramFiles%/publican/DocBook_DTD</filename> — most usually <filename>C:/Program Files/publican/DocBook_DTD</filename>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>chunk_first</parameter></term>
				<listitem>
					<para>
						controls whether the first section should appear on the same page as its parent when rendered in HTML. To make the first section appear on the same page as its parent, set this parameter to <literal>chunk_first: 1</literal>. Otherwise, the parameter defaults to <literal>0</literal>, and the first section starts a new HTML page.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>chunk_section_depth</parameter></term>
				<listitem>
					<para>
						controls the point at which <application>Publican</application> no longer splits sub-subsections onto a new page when rendering HTML. By default, this value is set to <literal>4</literal>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>classpath</parameter></term>
				<listitem>
					<para>
						sets the path to the <firstterm>Java archive</firstterm> (<firstterm>jar</firstterm>) files for <application>FOP</application>. <application>Publican</application> relies on Apache <application>FOP</application> — a Java application — to render documents as PDF files. The default path for <application>FOP</application>&#39;s jar files on a computer with a Linux operating system is: <filename>/usr</filename><filename>/share</filename><filename>/java</filename><filename>/ant</filename><filename>/ant-trax-1.7.0.jar:</filename><filename>/usr</filename><filename>/share</filename><filename>/java</filename><filename>/xmlgraphics-commons.jar:</filename><filename>/usr</filename><filename>/share</filename><filename>/java</filename><filename>/batik-all.jar:</filename><filename>/usr</filename><filename>/share</filename><filename>/java</filename><filename>/xml-commons-apis.jar:</filename><filename>/usr</filename><filename>/share</filename><filename>/java</filename><filename>/xml-commons-apis-ext.jar</filename>
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>common_config</parameter></term>
				<listitem>
					<para>
						sets the path to the <application>Publican</application> installation. The default location on a computer with a Linux operating system is <filename>/usr/share/publican</filename>. On a computer with a Windows operating system, the default location is <filename>%SystemDrive%/%ProgramFiles%/publican</filename> — most usually <filename>C:/Program Files/publican</filename>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>common_content</parameter></term>
				<listitem>
					<para>
						sets the path to the <application>Publican</application> <firstterm>Common Content</firstterm> files. These files provide default formatting, plus some boilerplate text and generic graphics. The default location on a computer with a Linux operating system is <filename>/usr/share/publican/Common_Content</filename>. On a computer with a Windows operating system, the default location is <filename>%SystemDrive%/%ProgramFiles%/publican/Common_Content</filename> — most usually <filename>C:/Program Files/publican/Common_Content</filename>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>condition</parameter></term>
				<listitem>
					<para>
						specifies conditions on which to prune XML before transformation. Refer to <xref linkend="sect-Users_Guide-Conditional_tagging" /> for more information.
					</para>
					<xi:include href="Root_nodes_and_conditionals.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
					<xi:include href="xrefs_and_conditionals.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>confidential</parameter></term>
				<listitem>
					<para>
						marks a document as confidential. When this parameter is set to <literal>1</literal>, <application>Publican</application> adds a prominent footer marked <literal>Confidential</literal> to each page. The default value is <literal>0</literal> (no footer).
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>debug</parameter></term>
				<listitem>
					<para>
						controls whether <application>Publican</application> should display debugging messages as it works. When set to its default of <literal>0</literal>, <application>Publican</application> does not display debugging messages. Change this value to <literal>1</literal> to view these messages.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>doc_url</parameter></term>
				<listitem>
					<para>
						provides a URL for the documentation team for this package. In multi-page HTML output, <application>Publican</application> links to this URL at the top right of each page, through the <filename>image_right.png</filename> image in the <filename>Common_Content/images</filename> directory for the brand. This parameter defaults to <literal>https://fedorahosted.org/publican</literal>
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>docname</parameter></term>
				<listitem>
					<para>
						specifies the document name. If set, this value overrides the content of the <sgmltag>&#60;title&#62;</sgmltag> tag in the <filename>Book_Info.xml</filename> file when you package a document. This value must include only contain upper- and lower-case un-accented letters, digits, and the underscore and space characters (&lsquo;a&ndash;z&rsquo;, &lsquo;A&ndash;Z&rsquo;, &lsquo;0&rsquo;&ndash;&lsquo;9&rsquo;, and &lsquo;_&rsquo; and &lsquo;&nbsp;&rsquo;).
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>dt_obsoletes</parameter></term>
				<listitem>
					<para>
						specifies the desktop packages that this package obsoletes. Refer to <xref linkend="sect-Users_Guide-Packaging_a_book" />.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>dtdver</parameter></term>
				<listitem>
					<para>
						specifies the version of the DocBook XML <firstterm>Document Type Definition</firstterm> (DTD) on which this project is based. <application>Publican</application> defaults to version 4.5. The specification for DocBook XML DTD version 4.5 is available from <ulink url="http://www.docbook.org/specs/docbook-4.5-spec.html" />.
					</para>
					<important>
						<title>A different DTD might slow your build</title>
						<para>
							When you install <application>Publican</application>, you also install a local copy of the DocBook XML DTD version 4.5 and accompanying <firstterm>Extensible Stylesheet Language</firstterm> (XSL). If you set a version of the DTD for which there is no local support, <application>Publican</application> must download the appropriate DTD and XSL from an online source every time that it builds the document. Building your document is delayed while this download takes place. The combined size of the required files is around 70&nbsp;MB.
						</para>
					</important>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>edition</parameter></term>
				<listitem>
					<para>
						specifies the edition number for this document. If set, this value overrides the content of the <sgmltag>&#60;edition&#62;</sgmltag> tag in the <filename>Book_Info.xml</filename> file when you package a document. This value must include only digits and the period (&lsquo;0&rsquo;&ndash;&lsquo;9&rsquo; and &lsquo;.&rsquo;).
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>generate_section_toc_level</parameter></term>
				<listitem>
					<para>
						controls the section depth at which <application>Publican</application> will generate a table of contents. At the default value of <literal>0</literal>, <application>Publican</application> will generate tables of contents at the start of the document and in parts, chapters, and appendixes, but not in sections. If (for example) the value is set to <literal>1</literal>, tables of contents also appear in each &#34;level 1&#34; section, such as sections 1.1, 1.2, 2.1, and 2.2. If set to <literal>2</literal>, tables of contents also appear in &#34;level 2&#34; sections, such as sections 1.1.1, 1.1.2, and 1.2.1.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>ignored_translations</parameter></term>
				<listitem>
					<para>
						specifies translations to ignore. If you build or package a book in a language specified by this parameter, <application>Publican</application> ignores any translations that exist for this language, and builds or packages the book in the language of the original XML instead. Refer to <xref linkend="sect-Users_Guide-Preparing_a_document_for_translation" />.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>license</parameter></term>
				<listitem>
					<para>
						specifies the license this package uses. By default, <application>Publican</application> selects the GNU Free Documentation License (GFDL). Refer to <xref linkend="sect-Users_Guide-Packaging_a_book" />.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>os_ver</parameter></term>
				<listitem>
					<para>
						specifies the operating system for which to build packages. <application>Publican</application> appends the value that you provide here to the RPM packages that it builds. For example, the default value is <literal>.el5</literal>, which signifies Red Hat Enterprise Linux 5 and operating systems derived from it. Refer to <xref linkend="sect-Users_Guide-Packaging_a_book" /> and <xref linkend="sect-Users_Guide-Packaging_a_brand" />.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>prod_url</parameter></term>
				<listitem>
					<para>
						provides a URL for the product to which this document applies. In multi-page HTML output, <application>Publican</application> links to this URL at the top left of each page, through the <filename>image_left.png</filename> image in the <filename>Common_Content/images</filename> directory for the brand. This parameter defaults to <literal>https://fedorahosted.org/publican</literal>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>product</parameter></term>
				<listitem>
					<para>
						specifies the product to which this documentation applies. If set, this value overrides the content of the <sgmltag>&#60;productname&#62;</sgmltag> tag in the <filename>Book_Info.xml</filename> file when you package a document. This value must include only contain upper- and lower-case un-accented letters, digits, and the underscore and space characters (&lsquo;a&ndash;z&rsquo;, &lsquo;A&ndash;Z&rsquo;, &lsquo;0&rsquo;&ndash;&lsquo;9&rsquo;, and &lsquo;_&rsquo; and &lsquo;&nbsp;&rsquo;).
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>release</parameter></term>
				<listitem>
					<para>
						specifies the release number of this package. If set, this value overrides the value of <sgmltag>&#60;pubsnumber&#62;</sgmltag> in the <filename>Book_Info.xml</filename> file when you package a document. This value must include only digits (&lsquo;0&rsquo;&ndash;&lsquo;9&rsquo;).
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>repo</parameter></term>
				<listitem>
					<para>
						specifies the repository from which to fetch remote books that form part of a distributed set. Refer to <xref linkend="sect-Users_Guide-Using_sets-Distributed_sets" />.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>scm</parameter></term>
				<listitem>
					<para>
						specifies the version control (or <firstterm>source code management</firstterm>) system used in the repository in that stores the remote books in a distributed set. At present, <application>Publican</application> can use only <application>Subversion</application> (SVN), and therefore uses <literal>SVN</literal> as its default setting. Refer to <xref linkend="sect-Users_Guide-Using_sets-Distributed_sets" />.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>show_remarks</parameter></term>
				<listitem>
					<para>
						controls whether to display remarks in transformed output. By default, this value is set to <literal>0</literal>, which causes <application>Publican</application> to hide remarks. Set this value to <literal>1</literal> to display remarks.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>show_unknown</parameter></term>
				<listitem>
					<para>
						controls whether <application>Publican</application> reports unknown tags when processing XML. By default, this value is set to <literal>1</literal>, so <application>Publican</application> reports unknown tags. Set this value to <literal>0</literal> to hide this output. <emphasis role="strikethrough"><application>Publican</application> ignores this parameter in <firstterm>strict mode</firstterm>.</emphasis>
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>src_url</parameter></term>
				<listitem>
					<para>
						specifies the URL at which to find tarballs of source files. This parameter provides the <literal>Source:</literal> field in the header of an RPM spec file. Refer to <xref linkend="sect-Users_Guide-Packaging_a_book" />.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>strict</parameter></term>
				<listitem>
					<para>
						<emphasis role="strikethrough">sets <application>Publican</application> to use <firstterm>strict mode</firstterm>, which prevents the use of tags that are unusable for professional output and translation. By default, the <literal>strict</literal> parameter is set of <literal>0</literal>, which disables strict mode. To enable strict mode, set this parameter to <literal>1</literal></emphasis> Strict mode is no longer enforced.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>tmp_dir</parameter></term>
				<listitem>
					<para>
						specifies the directory for <application>Publican</application> output. By default, this is set to <literal>tmp</literal>, which creates a directory named <filename>tmp</filename> inside the directory that holds your article or book.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>toc_section_depth</parameter></term>
				<listitem>
					<para>
						controls the depth of sections that <application>Publican</application> includes in the main table of contents. By default, this value is set to <literal>2</literal>. With the default setting, sections 1.1 and 1.1.1 will appear in the main table of contents, but section 1.1.1.1 will not. (Note that the first digit in these examples represents a chapter, not a section).
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>version</parameter></term>
				<listitem>
					<para>
						specifies the version number of that product to which this document applies. If set, this value overrides the content of the <sgmltag>&#60;productnumber&#62;</sgmltag> tag in the <filename>Book_Info.xml</filename> file when you package a document. This value must include only digits and the period (&lsquo;0&rsquo;&ndash;&lsquo;9&rsquo; and &lsquo;.&rsquo;).
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>web_brew_dist</parameter></term>
				<listitem>
					<para>
						specifies the <application>brew</application> build target to use for building the web RPM packages. <application>Brew</application> is the internal build system used by Red Hat. By default, this value is set to <literal>docs-5E</literal>, representing documentation packages for Red Hat Enterprise Linux 5. Refer to <xref linkend="sect-Users_Guide-Packaging_a_book" />.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><parameter>web_obsoletes</parameter></term>
				<listitem>
					<para>
						specifies packages that the web RPM obsoletes. Refer to <xref linkend="sect-Users_Guide-Packaging_a_book" />.Refer to <xref linkend="sect-Users_Guide-Packaging_a_book" />.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<note>
			<title>Help from the command line</title>
			<para>
				Run the <command>publican help_config</command> command in the root directory of a book for a summary of these parameters.
			</para>
		</note>
	</section>
	
	<section id="sect-Users_Guide-Files_in_the_book_directory-Book_Info.xml">
		<title>Book_Info.xml</title>
		<note>
			<title><filename>Article_Info.xml</filename> and <filename>Set_Info.xml</filename></title>
			<para>
				This description of the <filename>Book_Info.xml</filename> file applies to <filename>Article_Info.xml</filename> and <filename>Set_Info.xml</filename> files too. However, for the sake of simplicity, the file is referred to as <filename>Book_Info.xml</filename> throughout this section.
			</para>
		</note>
		<xi:include href="Applicable_to_RPM_only.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		<para>
			The <filename>Book_Info.xml</filename> file contains the key metadata concerning a book: the book&#39;s ID; title; subtitle; author and edition number. It also contains the name and version of the product that is documented, and an abstract.
		</para>
		<para>
			Aside from constituting much of a book&#39;s front matter, this metadata is also used when building books as RPM packages. Usually, if you distribute a book as an RPM package, several of the tags included by default in <filename>Book_Info.xml</filename> must have appropriate data within them, and that data must conform to the requirements of the RPM format. You can override the data in these tags by using equivalent fields in the <filename>publican.cfg</filename> file, as discussed in this section.
		</para>
		<para>
			Unless overridden in the <filename>publican.cfg</filename> file, data from seven of the default tags in <filename>Book_Info.xml</filename> is required to build books as RPMs. Most immediately, the file name of a book built as an RPM package is constructed as follows: <filename><replaceable>productname</replaceable>-<replaceable>title</replaceable>-<replaceable>productnumber</replaceable>-<replaceable>language</replaceable>-<replaceable>edition</replaceable>-<replaceable>pubsnumber</replaceable>.src.rpm</filename>. Everything but <replaceable>language</replaceable> above is pulled from <filename>Book_Info.xml</filename> — you specify <replaceable>language</replaceable> when you build the book. As well, the <sgmltag>&#60;subtitle&#62;</sgmltag> and <sgmltag>&#60;abstract&#62;</sgmltag> are used in the RPM spec file, to provide the <parameter>Summary:</parameter> field in the header and the <parameter>%description</parameter> field, respectively.
		</para>
		<para>
			An example <filename>Book_Info.xml</filename> file, for the <literal>Test_Book</literal> book, is presented below. Details regarding this file, and what the RPM format requirements are for each tag, follow.
		</para>
		
<programlisting language="XML">
<xi:include href="Book_Info.xml" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
		<variablelist>
			<varlistentry>
				<term><sgmltag>&#60;bookinfo id=&#34;<replaceable>book_id</replaceable>&#34;&#62;</sgmltag></term>
				<term><sgmltag>&#60;articleinfo id=&#34;<replaceable>article_id</replaceable>&#34;&#62;</sgmltag></term>
				<term><sgmltag>&#60;setinfo id=&#34;<replaceable>set_id</replaceable>&#34;&#62;</sgmltag></term>
				<listitem>
					<para>
						The document ID is used internally and is not displayed to readers when the book is built. If you run the <command>publican clean_ids</command> command, any manually entered ID, including this one, changes to a <replaceable>Doc_Name-Title</replaceable> format, where <replaceable>Title</replaceable> is the title of the associated book, article, section, or chapter.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><sgmltag>&#60;productname&#62;<replaceable>productname</replaceable>&#60;/productname&#62;</sgmltag></term>
				<listitem>
					<para>
						The name of the product or product stream to which the book, article, or set applies, for example: <literal>Red Hat Enterprise Linux</literal> or <literal>JBoss Enterprise Application Platform</literal>. When building a book as an RPM package, data in the &#60;productname&#62; tag is used as part of the file name of the package.
					</para>
					<para>
						Override this tag with the <parameter>product</parameter> variable in the <filename>publican.cfg</filename> file if the name of your product contains non-Latin characters, accented Latin characters, or punctuation marks other than the underscore.
					</para>
					<xi:include href="Permitted_alphanumeric.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><sgmltag>&#60;title&#62;<replaceable>title</replaceable>&#60;/title&#62;</sgmltag></term>
				<listitem>
					<para>
						Obviously enough, the title of the document (for example, <emphasis>Server Configuration Guide</emphasis>). The title appears under the product name in both HTML and PDF editions. A title is required to build an RPM package. When building a book as an RPM package the title is used as the part of the file name of the package.
					</para>
					<para>
						Override this tag with the <parameter>docname</parameter> variable in the <filename>publican.cfg</filename> file if the title of your document contains non-Latin characters, accented Latin characters, or punctuation marks other than the underscore.
					</para>
					<xi:include href="Permitted_alphanumeric.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><sgmltag>&#60;subtitle&#62;<replaceable>subtitle</replaceable>&#60;/subtitle&#62;</sgmltag></term>
				<listitem>
					<para>
						Again, plainly enough, the subtitle tag contains a book&#39;s subtitle: an alternative, and commonly explanatory title for the book (for example: <emphasis>Server Configuration Guide: Preparing Red Hat Enterprise Linux for Production Use</emphasis>). The subtitle appears under the title in both HTML and PDF editions. A subtitle is also required to make a book available as an RPM package. When building a book as an RPM package, the subtitle is used as the <parameter>Summary</parameter> in the RPM spec file. The <command>rpm -qi</command> returns the contents of several spec file fields, including the <computeroutput>Summary</computeroutput> field.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><sgmltag>&#60;productnumber&#62;<replaceable>productnumber</replaceable>&#60;/productnumber&#62;</sgmltag></term>
				<listitem>
					<para>
						The version number of the product the book covers, for example &lsquo;5.2&rsquo; for Red Hat Enterprise Linux 5.2 and &lsquo;4.3&rsquo; for JBoss EAP 4.3.
					</para>
					<para>
						Running the <command>publican create --name <replaceable>Doc_Name</replaceable> --version <replaceable>version</replaceable></command> command correctly configures the product number.
					</para>
					<para>
						Override this tag with the <parameter>version</parameter> variable in the <filename>publican.cfg</filename> file if the product version is anything other than a number.
					</para>
					<xi:include href="Permitted_numbers.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><sgmltag>&#60;edition&#62;<replaceable>edition</replaceable>&#60;/edition&#62;</sgmltag></term>
				<listitem>
					<para>
						This is the edition number of the book. The first edition of the book should be 1.0 (unless you use 0.<replaceable>x</replaceable> for pre-release versions of a book). Subsequent editions should increment the 1.<replaceable>x</replaceable> to indicate to readers that the book is a new edition. The edition changes the version number in the file name when building a book with the <command>publican package</command> command.
					</para>
					<para>
						For example, setting the edition to <filename>1.2</filename> and building the book using the <command>publican package --binary --lang=en-US</command> command creates an RPM file named <filename><replaceable>productname</replaceable>-<replaceable>title</replaceable>-<replaceable>productnumber</replaceable>-en-US-1.2-0.src.rpm</filename>.
					</para>
					<para>
						Running the <command>publican create --name<replaceable> Doc_Name</replaceable> --edition <replaceable>x</replaceable>.<replaceable>y</replaceable></command> command correctly configures the edition.
					</para>
					<para>
						Override this tag with the <parameter>edition</parameter> variable in the <filename>publican.cfg</filename> file if the edition of your document is identified by anything other than a number.
					</para>
					<xi:include href="Permitted_numbers.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><sgmltag>&#60;pubsnumber&#62;<replaceable>pubsnumber</replaceable>&#60;/pubsnumber&#62;</sgmltag></term>
				<listitem>
					<para>
						The pubsnumber changes the release number (the last digit) when building a book with the <command>publican package</command> command. For example, setting the pubsnumber to <filename>1</filename> and building the book using the <command>publican package --binary --lang=en-US</command> command creates an RPM file named <filename><replaceable>productname</replaceable>-<replaceable>title</replaceable>-<replaceable>productnumber</replaceable>-en-US-<replaceable>edition</replaceable>-1.src.rpm</filename>.
					</para>
					<para>
						Override this tag with the <parameter>release</parameter> variable in the <filename>publican.cfg</filename> file if the release number of your document contains anything other than whole numbers.
					</para>
					<xi:include href="Permitted_integers.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><sgmltag>&#60;abstract&#62;&#60;para&#62;<replaceable>abstract</replaceable>&#60;/para&#62;&#60;/abstract&#62;</sgmltag></term>
				<listitem>
					<para>
						A short overview and summary of the book&#39;s subject and purpose, traditionally no more than a paragraph long. The abstract appears before the table of contents in HTML editions and on the second page of PDF editions. When a book is built as an RPM package, the abstract sets the <parameter>Description</parameter> field of the RPM&#39;s spec file. This makes the abstract for a package available via the <command>rpm -qi</command> command.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			You can add extra metadata to the <filename>Book_Info.xml</filename> file of a document, to support specific features in various output formats:
		</para>
		<variablelist>
			<varlistentry>
				<term><sgmltag>&#60;keywordset&#62;</sgmltag></term>
				<term><sgmltag>&#60;keyword&#62;</sgmltag></term>
				<listitem>
					<para>
						Terms tagged with <sgmltag>&#60;keyword&#62;</sgmltag> and placed within a <sgmltag>&#60;keywordset&#62;</sgmltag> are added to a <sgmltag>&#60;meta name=&#34;keywords&#34;&#62;</sgmltag> entry in the head of HTML files and to the <literal>Keywords</literal> field of the properties of a PDF document.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><sgmltag>&#60;subjectset&#62;</sgmltag></term>
				<term><sgmltag>&#60;subject&#62;</sgmltag></term>
				<listitem>
					<para>
						Terms tagged with <sgmltag>&#60;subject&#62;</sgmltag> and placed within a <sgmltag>&#60;subjectset&#62;</sgmltag> are added to the <literal>Subject</literal> field of the properties of a PDF document and in the metadata of an ebook in EPUB format.
					</para>
					<para>
						Consider using a <firstterm>controlled vocabulary</firstterm> when defining the subject of your document, for example, the <firstterm>Library of Congress Subject Headings</firstterm> (LCSH). Identify the chosen vocabulary with the <parameter>scheme</parameter> attibute in the <sgmltag>&#60;subjectset&#62;</sgmltag> tag, for example, <sgmltag>&#60;subjectset scheme=&#34;libraryofcongress&#34;&#62;</sgmltag>. You can search for LCSH subject headings through the Library of Congress <citetitle>Authorities &#38; Vocabularies</citetitle> page: <ulink url="http://id.loc.gov/authorities/search/" />.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><sgmltag>&#60;mediaobject role=&#34;cover&#34; id=&#34;epub_cover&#34;&#62;</sgmltag></term>
				<listitem>
					<para>
						Use a <sgmltag>&#60;mediaobject&#62;</sgmltag> tag with the <literal>role=&#34;cover&#34;</literal> and <literal>id=&#34;epub_cover&#34;</literal> attributes to set cover art for an ebook in EPUB format. For example:
					</para>
					
<programlisting language="XML">&#60;mediaobject role=&#34;cover&#34; id=&#34;epub_cover&#34;&#62;
	&#60;imageobject role=&#34;front-large&#34; remap=&#34;lrg&#34;&#62;
		&#60;imagedata width=&#34;600px&#34; format=&#34;PNG&#34; fileref=&#34;images/front_cover.png&#34;/&#62;
	&#60;/imageobject&#62;
	&#60;imageobject role=&#34;front&#34; remap=&#34;s&#34;&#62;
		&#60;imagedata format=&#34;PNG&#34; fileref=&#34;images/front_cover.png&#34;/&#62;
	&#60;/imageobject&#62;
	&#60;imageobject role=&#34;front-small&#34; remap=&#34;xs&#34;&#62;
		&#60;imagedata format=&#34;PNG&#34; fileref=&#34;images/front_cover.png&#34;/&#62;
	&#60;/imageobject&#62;
	&#60;imageobject role=&#34;thumbnail&#34; remap=&#34;cs&#34;&#62;
		&#60;imagedata format=&#34;PNG&#34; fileref=&#34;images/front_cover_thumbnail.png&#34;/&#62;
	&#60;/imageobject&#62;
&#60;/mediaobject&#62;
</programlisting>
					<para>
						As with all the other images in your document, place the cover images in the <filename>images</filename> subdirectory.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<section id="sect-Users_Guide-Book_Info.xml-RPM_packages_editions_impressions_and_versions">
			<title>RPM packages, editions, impressions and versions</title>
			<para>
				As noted above, the default <filename>Book_Info.xml</filename> used by <application>Publican</application> includes an <parameter>&#60;edition&#62;</parameter> tag.
			</para>
			<para>
				If you distribute a book as an RPM package, the data placed within this tag sets &#39;the first two digits of the version number in the RPM file name.
			</para>
			<para>
				So, an edition of &#39;1.0&#39; becomes a version of &#39;1.0&#39;.
			</para>
			<para>
				<filename>Book_Info.xml</filename> also includes the <parameter>&#60;pubsnumber&#62;</parameter> tag. Any data placed within this tag changes the release number of RPM-packaged books.
			</para>
			<para>
				A book with an edition of 1.0 and a pubsnumber of 5, would be version 1.0, release 5 (1.0-5).
			</para>
			<para>
				The edition and pubsnumber are not tied to the <parameter>&#60;productnumber&#62;</parameter> tag also found in <filename>Book_Info.xml</filename>: <parameter>&#60;productnumber&#62;</parameter> denotes the version number of the product being documented or otherwise written about.
			</para>
			<para>
				It is entirely possible to have a 2nd edition of a book pertaining to a particular version of a product.
			</para>
			<para>
				In bibliography, two copies of a book are the same edition if they are printed using substantially the same type-set master plates or pages. (&#39;Substantially&#39; offers some allowance for typo corrections and other inconsequential changes.)
			</para>
			<para>
				Book collectors routinely conflate &#39;first edition&#39; with &#39;first print run&#39;, while bibliographers pay attention to the text commonly placed in the front matter of a book, which calls a 2nd print run off the same (or substantially the same) plates a &#39;1st edition, 2nd impression&#39; or &#39;1st edition, 2nd printing&#39;.
			</para>
			<para>
				We recommend following bibliographic practice in this regard. When using <application>Publican</application> to re-publish a book from &#39;substantially the same XML&#39;, increment the <parameter>&#60;pubsnumber&#62;</parameter> tag, not the <parameter>&#60;edition&#62;</parameter> tag. It functions as a near-equivalent to the impression or printing number of traditional publishing.
			</para>
			<para>
				As for changing the edition number, we recommend changing this in the same circumstances traditional publishers change the edition of a work: when it is revised and re-written significantly. What constitutes significant, and how much re-writing is needed to increment an edition number by a whole number and how much is needed to increment it by one-tenth of a whole number, is a matter of editorial discretion.
			</para>
		</section>

	</section>
	
	<section id="sect-Users_Guide-Files_in_the_book_directory-Author_Group.xml">
		<title>Author_Group.xml</title>
		<para>
			<filename>Author_Group.xml</filename> is not required but is the standard place to record author, editor, artist and other credit details. The following is an example <filename>Author_Group.xml</filename> file:
		</para>
		
<programlisting language="XML"><xi:include href="extras/Author_Group.xml" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
		<para>
			<filename>Author_Group.xml</filename> does not have to contain all of the above information: include as much or as little as required.
		</para>
	</section>
	
	<section id="sect-Users_Guide-Files_in_the_book_directory-Chapter.xml">
		<title>Chapter.xml</title>
		<important>
			<title>Articles and chapters</title>
			<para>
				DocBook articles cannot contain chapters. If you use the <option>--type=article</option> option with <command>publican create</command>, <application>Publican</application> does not create a <filename>Chapter.xml</filename> file. Use sections to organize content within articles.
			</para>
			<para>
				Refer to <citetitle>DocBook: The Definitive Guide</citetitle> by Norman Walsh and Leonard Muellner available at <ulink url="http://www.docbook.org/tdg/en/html/docbook.html" /> for details of the different ways that sets, books, articles, parts, chapters, and sections interact. In particular, note that articles can be stand-alone documents, or can be incorporated into books.
			</para>
		</important>
		<para>
			The <filename>Chapter.xml</filename> file is a template for creating chapter files. Chapter files contain the content that make up a book. The following is a chapter template (<filename>Chapter.xml</filename>) that is created by the <command>publican create</command> command. Note the <filename>DOCTYPE</filename> is set to <filename>chapter</filename>:
		</para>
		
<programlisting language="XML"><xi:include href="extras/Chapter.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
		<para>
			This chapter has two sections, <filename>Section 1 Test</filename> and <filename>Section 2 Test</filename>. Refer to <ulink url="http://docbook.org/tdg/en/html/chapter.html" /> for further information about chapters.
		</para>
		<note>
			<title>Note</title>
			<para>
				The chapter file should be renamed to reflect the chapter subject. For example, a chapter on product installation could be named <filename>Installation.xml</filename>, whereas a chapter on setting up a piece of software would be better called <filename>Setup.xml</filename> or <filename>Configuration.xml</filename>.
			</para>
		</note>
	</section>
	
	<section id="sect-Users_Guide-Files_in_the_book_directory-Doc_Name.xml">
		<title>Doc_Name.xml</title>
		<para>
			The <filename><replaceable>Doc_Name</replaceable>.xml</filename> file contains <literal>xi:include</literal> directives to include the other necessary XML files for the document, including chapters or sections contained in other XML files. For example, a book&#39;s <filename><replaceable>Doc_Name</replaceable>.xml</filename> file brings together chapters that are contained in separate XML files.
		</para>
		<para>
			The following is an example <filename><replaceable>Doc_Name</replaceable>.xml</filename> file that describes a DocBook book — note the <parameter>DOCTYPE</parameter> is set to <literal>book</literal>.
		</para>
		
<programlisting language="XML"><xi:include href="extras/Book_Name.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</programlisting>
		<para>
			This example loads the <filename>Book_Info.xml</filename>, <filename>Preface.xml</filename>, <filename>Chapter.xml</filename>, and <filename>Appendix.xml</filename> XML files.
		</para>
		<important>
			<title>Important</title>
			<para>
				The order in which chapters are listed matters. When this example book is built, <filename>Book_Info.xml</filename> will precede <filename>Preface.xml</filename> which will precede <filename>Chapter.xml</filename>, and so on.
			</para>
		</important>
		<para>
			The <filename><replaceable>Doc_Name</replaceable>.xml</filename> file is not limited to using <literal>xi:include</literal> directives. You can create documents with a single XML file. The following is an example of a book created using a single XML file:
		</para>
		
<programlisting language="XML">&#60;book&#62;

&#60;chapter&#62;
&#60;title&#62;Chapter 1&#60;/title&#62;
&#60;para&#62;
	A paragraph in Chapter 1.
&#60;/para&#62;
&#60;section id=&#34;section1&#34;&#62;
&#60;title&#62;Chapter 1 Section 1&#60;/title&#62;
	&#60;para&#62;
		A paragraph in Section 1.
	&#60;/para&#62;
&#60;/section&#62;
&#60;section id=&#34;section2&#34;&#62;
&#60;title&#62;Chapter 1 Section 2&#60;/title&#62;
	&#60;para&#62;
		A paragraph in Section 2.
	&#60;/para&#62;
&#60;/section&#62;
&#60;/chapter&#62;

&#60;chapter&#62;
&#60;title&#62;Chapter 2&#60;/title&#62;
&#60;para&#62;
	A paragraph in Chapter 2.
&#60;/para&#62;
&#60;/chapter&#62;

&#60;/book&#62;
</programlisting>
		<para>
			This book contains two chapters. Chapter one contains two sections. Refer to <ulink url="http://docbook.org/tdg/en/html/section.html" /> for further information about sections, and <ulink url="http://docbook.org/tdg/en/html/book.html" /> for further information about books.
		</para>
	</section>
	
	<section id="sect-Users_Guide-Files_in_the_book_directory-Doc_Name.ent">
		<title>Doc_Name.ent</title>
		<para>
			The <filename><replaceable>Doc_Name</replaceable>.ent</filename> file is used to define local entities. The <parameter>YEAR</parameter> and <parameter>HOLDER</parameter> entities are used for copyright information. By default, <application>Publican</application> sets <parameter>YEAR</parameter> to the current year, and inserts a message into <parameter>HOLDER</parameter> to remind you to specify the copyright holder for the document. If the <parameter>YEAR</parameter> and <parameter>HOLDER</parameter> entities are missing altogether, the document will not build.
		</para>
		<para>
			Other entities might be required by the <firstterm>brand</firstterm> applied to your document. For example, the <application>Publican</application> brand for Fedora documents uses the entity <computeroutput>BOOKID</computeroutput> to specify how readers should refer to a document when they submit feedback about it.
		</para>
		<para>
			
<screen><xi:include href="extras/Book_Name.ent" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" />
</screen>
		</para>
		<xi:include href="Entities.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
	</section>
	
	<section id="sect-Users_Guide-Files_in_the_book_directory-Revision_History.xml">
		<title>Revision_History.xml</title>
		<para>
			The <command>publican package</command> command searches for the first XML file in the document&#39;s XML directory containing a <literal>&#60;revhistory&#62;</literal> tag. <application>Publican</application> then uses that file to build the RPM revision history.
		</para>
	</section>

</section>


