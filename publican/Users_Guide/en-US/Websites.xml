<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Users_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="sect-Users_Guide-Website">
	<title>Building a website with Publican</title>
	<para>
		<application>Publican</application> not only builds documents for publication but can build and manage a documentation website as well. For a suite of documents that you maintain by yourself, you can use <application>Publican</application> to build a site on your local system; you can then upload the site to a webserver by whatever means you choose. This approach does not scale well, however, so for team-based documentation projects, <application>Publican</application> can generate RPM packages of documentation to install on the webserver. To install <application>Publican</application>-generated RPM packages on a webserver, <application>Publican</application> (version 2.1 or higher) and <application>rpm</application> must be installed on the server. If you build and maintain the website on a workstation and upload it to a webserver for publication,  <application>Publican</application> and <application>rpm</application> do not need to be installed on the webserver.
	</para>
	<para>
		The websites that <application>Publican</application> creates consist of three parts: the website structure, a home page, and the documents published on the site. The website structure itself consists of:
	</para>
	<itemizedlist>
		<listitem>
			<para>
				a configuration file.
			</para>
		</listitem>
		<listitem>
			<para>
				an SQLite database file.
			</para>
		</listitem>
		<listitem>
			<para>
				a subdirectory for the published documents, which contains:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<filename>index.html</filename> — an index page that redirects to localized versions of a home page for the site.
					</para>
				</listitem>
				<listitem>
					<para>
						<filename>interactive.css</filename> — a CSS stylesheet that contains styles for the navigation menu, map, and site statistics page.
					</para>
				</listitem>
				<listitem>
					<para>
						<filename>Sitemap</filename> — an XML Sitemap to assist search engines to crawl the site.
					</para>
				</listitem>
				<listitem>
					<para>
						<filename>toc.html</filename> — a static map of the documents on the site, to assist visitors to the site who do not have JavaScript enabled on their browsers.
					</para>
				</listitem>
				<listitem>
					<para>
						<filename>toc.js</filename> — a JavaScript script that directs visitors to localized content based on the locale set in their browser and which controls the presentation of the navigation menu.
					</para>
				</listitem>
				<listitem>
					<para>
						subdirectories for each language in which you publish. Initially, this contains: <filename>Site_Statistics.html</filename>
					</para>
					<itemizedlist>
						<listitem>
							<para>
								<filename>Site_Statistics.html</filename> — an overview of the documentation installed on the site.
							</para>
						</listitem>
						<listitem>
							<para>
								<filename>Site_Tech.html</filename> — an overview of the technology used to build the site.
							</para>
						</listitem>
						<listitem>
							<para>
								<filename>toc.html</filename> — the table of contents for that language, initially without links to any documents.
							</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
		</listitem>
	</itemizedlist>
	
	<section id="sect-Users_Guide-Website-manual">
		<title>Building a website manually</title>
		
		<xi:include href="Websites_structure_manual.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		
		<xi:include href="Websites_homepage_manual.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		
		<xi:include href="Websites_documents_manual.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		
	</section>
	
	<section id="sect-Users_Guide-Website-rpm">
		<title>Building a website using RPM packages</title>
		
		<xi:include href="Websites_structure_rpm.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		
		<xi:include href="Websites_homepage_rpm.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		
		<xi:include href="Websites_documents_rpm.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
		
			<section id="sect-Users_Guide-Website-automation">
			<title>Automating publishing</title>
			<para>
				Because <application>Publican</application> can generate RPM packages, you can use <application>Publican</application> together with an RPM build system like <application>Koji</application> to automate your publishing process. When a document is ready for publication, the writer or translator runs the following command:
			</para>
<screen><command>publican package --cvs</command></screen>
			<para>
				<application>Publican</application> then carries out the following actions:
			</para>
			<orderedlist>
				<listitem>
					<para>
						generates an SRPM
					</para>
				</listitem>
				<listitem>
					<para>
						imports the SRPM into the CVS root for the <application>Koji</application> instance specified in the document's <filename>publican.cfg</filename> file
					</para>
				</listitem>
				<listitem>
					<para>
						runs <command>cvs up</command>
					</para>
				</listitem>
				<listitem>
					<para>
						runs <command>make build</command>
					</para>
				</listitem>
			</orderedlist>
			<para>
				If your webserver periodically checks for updated packages in the repository in which <application>Koji</application> places built packages, the webserver can automatically install updated versions of your documents. 
			</para>
			<para>
				You might also implement a system of tags where a writer or translator could run <command>koji tag-pkg</command> to apply a <firstterm>tag</firstterm> to the built package. You can then have different webservers install the package, depending on which tags are applied to it. For example, you could configure a server on your intranet to install any packages tagged <literal>draft</literal> and make them available internally for proofreading and technical review. You could then configure the server that publishes documents publicly on the web to install packages only when they are tagged <literal>public</literal>.
			</para>
			<para>
				To prepare a document for building in a <application>Koji</application> instance, edit the <filename>publican.cfg</filename> file to specify:
			</para>
			<variablelist>
				<varlistentry>
					<term><parameter>cvs_branch</parameter></term>
					<listitem>
						<para>
							the name of the <firstterm>branch</firstterm> for the package; typically, a particular software version.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><parameter>cvs_pkg</parameter></term>
					<listitem>
						<para>
							the name of the package in CVS. <application>Publican</application> defaults to: <literal><replaceable>product</replaceable>-<replaceable>title</replaceable>-<replaceable>product_version</replaceable>-web-<replaceable>language</replaceable>-<replaceable>edition</replaceable>-<replaceable>pubsnumber</replaceable></literal>
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><parameter>cvs_root</parameter></term>
					<listitem>
						<para>
							the CVS root into which to import the SRPM. For example, the CVS root for the Fedora Project's <application>Koji</application> instance is <literal>:ext:USERNAME@cvs.fedoraproject.org:/cvs/pkgs</literal>
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			
			<para>
				For more information about <application>Koji</application>, visit <ulink url="https://fedorahosted.org/koji/wiki"></ulink>.
			</para>

		</section>

		
	</section>

</chapter>

