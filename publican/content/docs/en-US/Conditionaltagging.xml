<?xml version='1.0'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
	
	<section id="conditionaltagging">
		<title>Conditional Tagging</title>
		
	<para>In some cases you may need to maintain multiple versions of a book; for example, a HOWTO guide for product FOO can have an upstream version and an enterprise version, with very subtle differences between them.</para>	
		
	<para>Publican makes it easy to manage differences between multiple versions of a book by allowing you to simply use one source for all versions. <firstterm>Conditional tagging</firstterm> allows you to make sure that version-specific content only appears in the correct version; i.e. "conditionalizing content".</para>
	
	<para>To conditionalize content in a book, use the tag attribute <command>condition</command>. For example, let's say the book <citetitle>How To Use Product Foo</citetitle> has an "upstream", "enterprise", and "beta" version:</para>
	
<screen>
&lt;para condition="upstream">
This paragraph will only appear in the upstream version of How To Use Product Foo.
&lt;/para>
	
&lt;para condition="enterprise">
This paragraph will only appear in the enterprise version of How To Use Product Foo.
&lt;/para>	
	
&lt;para condition="beta">
This paragraph will only appear in the beta version of How To Use Product Foo.
&lt;/para>
	
&lt;para condition="beta,enterprise">
This paragraph will only appear in the beta and enterprise versions of How To Use Product Foo.
&lt;/para>	
</screen>	
	<para>To build a specific version (thereby capturing all content conditionalized for that version), use <command>make</command> parameter <command>CONDITION="<replaceable>version</replaceable>" <replaceable>format</replaceable></command>. Using the same example for the book <citetitle>How To Use Product Foo</citetitle>, you can build the "upstream" version of the book in pdf using:</para>
	
<screen>
make CONDITION="upstream" pdf-en-US
</screen>
	
<para>This will capture all tags that use <command>condition="upstream"</command> and build <citetitle>How To Use Product Foo</citetitle> in PDF format.</para>

<note>
	<title>Note</title>
	<para>You can conditionalize content as per the <command>BRAND</command> setting. To do so, add the following line to <filename>Makefile</filename>:</para>
	
<screen>
CONDITION=($BRAND)
</screen>

	<para>In this manner, <command>make CONDITION="brand1" pdf-en-US</command> will build the book in PDF <emphasis>and</emphasis> capture all tags that use the  <command>condition="brand1"</command> attribute.</para>
</note>

<para>Further, if an <command>&lt;xref></command> points to content that is not going to be included in the build due to conditional tagging, the build will fail. For example, <command>make CONDITION="upstream" pdf-en-US</command> will fail if the book has the tag <command>&lt;xref linkend="betasection"</command> pointing to <command>&lt;section id="betasection" CONDITION="beta"></command>.</para> 
	
<!--
	<para>At present, conditional tagging is supported on all build formats except for desktop RPMs.</para>
	-->

</section>	
	
