<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>

<chapter id="chap-Users_Guide-Using_the_publican_package">
	<title>Using the publican package</title>
	<para>
		This chapter describes the process of installing the publican package, creating books, the main configuration files, example book files, and how to build a book.
	</para>
	<section id="sect-Users_Guide-Using_the_publican_package-Installing_publican">
		<title>Installing publican</title>
		<para>
			To install publican:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					Change to the root user: <command><prompt>$</prompt> su - </command>
				</para>
			</listitem>
			<listitem>
				<para>
					Run the following command to install the publican package: <command><prompt>#</prompt> yum install publican publican-doc</command>
				</para>
			</listitem>
		</itemizedlist>
		<para>
			There are several brand packages available for use with publican. Run the following command as the root user to install packages for building branded books:
		</para>
		
<screen># yum install publican-<replaceable>brand</replaceable>
</screen>
		<para>
			Replace <replaceable>brand</replaceable> with redhat, fedora, jboss, ovirt, or gimp.
		</para>
	</section>
	
	<section id="sect-Users_Guide-Using_the_publican_package-Creating_a_Book">
		<title>Creating a Book</title>
		<para>
			Use the <command>create_book</command> command to create a new book. The <command>create_book</command> command creates all the necessary files to create a book.
		</para>
		<para>
			The following is a list of valid options for the <command>create_book</command> command. Append these options to the end of the <command>create_book</command> command. For example, <command>create_book --help</command>, <command>create_book --name New_Book</command>, and so on:
		</para>
		<variablelist>
			<varlistentry>
				<term><filename>--help</filename></term>
				<listitem>
					<para>
						print a list of all <command>create_book</command> command options.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>--man</filename></term>
				<listitem>
					<para>
						view the publican manual page. The manual page contains the same information returned by the <command>create_book --help</command> command.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>--name<replaceable> Book_Name</replaceable></filename></term>
				<listitem>
					<para>
						replace <replaceable>Book_Name</replaceable> with the name of the book or article. This variable must not contain any spaces. For example, running the <command>create_book --name Test_Book</command> command creates a book named Test_Book, and all the necessary files to build the book. This updates the <filename>Makefile</filename> with the correct <computeroutput>DOCNAME</computeroutput>, and the <filename><replaceable>Book_Name</replaceable>.ent</filename> file with the correct <computeroutput>BOOKID</computeroutput>.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>--version<replaceable> version</replaceable></filename></term>
				<listitem>
					<para>
						replace <replaceable>version</replaceable> with the version number of the product that the book describes. For example, for Red Hat Enterprise Linux 5.1 you would use 5.1. The default version is 0.1. Using <command>--version <replaceable> version</replaceable></command> updates the <computeroutput>&lt;issuenum&gt;&lt;/issuenum&gt;</computeroutput> tags in the <filename>Book_Info.xml</filename> file. For more information see <xref linkend="sect-Users_Guide-Files_in_the_Book_directory-Book_Info.xml" />.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>--edition<replaceable> edition</replaceable></filename></term>
				<listitem>
					<para>
						replace <replaceable> edition</replaceable> with the edition number of the book. This number indicates to users when a new edition of the book is released. The initial GA release of the book should be edition 1.0. The default value is 0. Using <command>--edition<replaceable> edition</replaceable></command> updates the <computeroutput>&lt;edition&gt;&lt;/edition&gt;</computeroutput> tags in the <filename>Book_Info.xml</filename> file. For more information see <xref linkend="sect-Users_Guide-Files_in_the_Book_directory-Book_Info.xml" />.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>--product<replaceable> Product_Name</replaceable></filename></term>
				<listitem>
					<para>
						replace <replaceable> Product_Name</replaceable> with the product name. This variable must not contain any spaces. Set this to <computeroutput>Fedora</computeroutput> for core Fedora documentation, and the name of the product for other products, for example, <computeroutput>Fedora_Directory_Server</computeroutput>. The <command>--product<replaceable> Product_Name</replaceable></command> option updates the <filename>Makefile</filename> and the <filename><replaceable>Book_Name</replaceable>.ent</filename> file with the correct product name.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>--type Article --name<replaceable> Article_Name</replaceable></filename></term>
				<listitem>
					<para>
						create an article instead of a book. Replace <replaceable> Article_Name</replaceable> with the article name. This variable must not contain any spaces.
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term><filename>--brand <replaceable>brand</replaceable></filename></term>
				<listitem>
					<para>
						replace <replaceable>brand</replaceable> with RedHat, fedora, JBoss, oVirt, or GIMP. This requires the appropriate publican package to be installed. For example, to build Red Hat branded books, you must install the publican-redhat package. See <xref linkend="sect-Users_Guide-Using_the_publican_package-Installing_publican" /> for instructions on installing the branded publican packages. If no brand is specified, the default brand is used.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>
			Before running the <command>create_book</command> command, use the <command>cd</command> command to change into the directory where you want the book to be created. For example, to create a book named Test_Book in the <filename>/my/books/</filename> directory, run the following commands:
		</para>
		<para>
			
<screen>cd /my/books/
</screen>
		</para>
		<para>
			
<screen>create_book --name Test_Book
</screen>
		</para>
		<para>
			To see the results of this command, run the following:
		</para>
		<para>
			
<screen>ls
</screen>
		</para>
		<para>
			The output should be similar to the following:
		</para>
		<para>
			
<screen>en-US  Makefile
</screen>
		</para>
	</section>
	
	<section id="sect-Users_Guide-Using_the_publican_package-Files_in_the_Book_directory">
		<title>Files in the Book directory</title>
		<para>
			Running the <command>create_book --name <replaceable>Book_Name</replaceable></command> command will create a directory structure and the required files, similar to the following:
		</para>
		<figure id="figu-Users_Guide-Files_in_the_Book_directory-directory_structure">
			<title>directory structure</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="./images/directory_structure.png" format="PNG" />
				</imageobject>
				<textobject>
					<phrase>directory structure</phrase>
				</textobject>
			</mediaobject>
		</figure>
		<section id="sect-Users_Guide-Files_in_the_Book_directory-The_Makefile">
			<title>The Makefile</title>
			<para>
				The <filename>Makefile</filename> is used to configure build options, and is located in the root of the book directory. The following is an example <filename>Makefile</filename>, with instructions following afterwards:
			</para>
			
<programlisting><xi:include href="extras/Makefile" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
</programlisting>
			<variablelist>
				<varlistentry>
					<term><filename>XML_LANG</filename></term>
					<listitem>
						<para>
							set this to the language of the source xml files, for example, <computeroutput>en-US</computeroutput>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>BRAND</filename></term>
					<listitem>
						<para>
							set the brand of the book. Accepted values are <computeroutput>RedHat</computeroutput>, <computeroutput>fedora</computeroutput>, <computeroutput>JBoss</computeroutput>, <computeroutput>oVirt</computeroutput> and <computeroutput>GIMP</computeroutput>. If no brand is specified, the default brand is used.
						</para>
						<para>
							Running the <command>create_book --name <replaceable>Book_Name</replaceable> --brand <replaceable>brand</replaceable></command> command correctly configures the <computeroutput>BRAND</computeroutput>.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>OTHER_LANGS</filename></term>
					<listitem>
						<para>
							space-separated list of other language locales. Used to specify other language locales to build the book in.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<para>
				The following is an example <filename>Makefile</filename> that includes translations:
			</para>
			<para>
				
<programlisting>XML_LANG       = en-US
BRAND	       = RedHat

OTHER_LANGS    = as-IN bn-IN de-DE es-ES fr-FR gu-IN hi-IN it-IT ja-JP kn-IN ko-KR ml-IN mr-IN or-IN pa-IN pt-BR ru-RU si-LK ta-IN te-IN zh-CN zh-TW
	
COMMON_CONFIG  = /usr/share/publican
include $(COMMON_CONFIG)/make/Makefile.common
</programlisting>
			</para>
			<note>
				<title>Note</title>
				<para>
					<computeroutput>OTHER_LANGS</computeroutput> is no longer commented out.
				</para>
			</note>
			<note>
				<title>Note</title>
				<para>
					Run the <command>make help_params</command> command in the root directory of a book for a full list of parameters that can be set in the <filename>Makefile</filename>.
				</para>
			</note>
		</section>
		
		<section id="sect-Users_Guide-Files_in_the_Book_directory-Book_Info.xml">
			<title>Book_Info.xml</title>
			<para>
				The <filename>Book_Info.xml</filename> file contains the key meta-data concerning a book: the book&#39;s ID; title; subtitle; author and edition number. It also contains the name and version of the product the book is about and an abstract.
			</para>
			<para>
				Aside from, as you&#39;d expect, constituting much of a book&#39;s front matter, this meta-data is also used when building books as RPMs. Consequently, if you wish to distribute a book as a .rpm file, several of the tags included by default in <filename>Book_Info.xml</filename> must have appropriate data within them, and that data must conform to the requirements of the RPM format.
			</para>
			<para>
				Data from seven of the default tags in <filename>Book_Info.xml</filename> is required to build books as RPMs. Most immediately, the file name of a book built as an RPM is constructed as follows: <filename><replaceable>productname</replaceable>-<replaceable>title</replaceable>-<replaceable>productnumber</replaceable>-<replaceable>language</replaceable>-<replaceable>edition</replaceable>-<replaceable>pubsnumber</replaceable>.src.rpm</filename>. Everything but <replaceable>language</replaceable> above is pulled from <filename>Book_Info.xml</filename>. (Language is supplied by the user at make time.) As well, the <replaceable>subtitle</replaceable> and <replaceable>abstract</replaceable> are used in the rpm spec file.
			</para>
			<para>
				An example <filename>Book_Info.xml</filename> file, for the Test_Book book, is presented below. Details regarding this file, and what the RPM format requirements are for each tag, follow.
			</para>
			
<programlisting language="xml">
<xi:include href="extras/Book_Info.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
</programlisting>
			<variablelist>
				<varlistentry>
					<term><filename>&lt;bookinfo id="<replaceable>book_id</replaceable>"&gt;</filename></term>
					<listitem>
						<para>
							The Book ID is used internally and is not displayed to end users when the book is built. If you run the <command>make clean_ids</command> command, any manually entered ID, including this one, will be changed to a <replaceable>Book_Name-Title</replaceable> format, where <replaceable>Title</replaceable> is the title of the associated book, article, section, or chapter.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>&lt;productname&gt;<replaceable>productname</replaceable>&lt;/productname&gt;</filename></term>
					<listitem>
						<para>
							The name of the product or product stream the book is about (for example: <emphasis>Red Hat Enterprise Linux</emphasis> or <emphasis>JBoss Enterprise Application Platform</emphasis>). When building a book as an RPM, data in the &lt;productname&gt; tag is used as part of the filename of the resultant .rpm file.
						</para>
						<important>
							<title>Important</title>
							<para>
								Because data in this tag also appears as part of the .rpm filename, this field can only contain upper- and lower-case un-accented letters and the underscore and space characters (ie &lsquo;a&ndash;z&rsquo;, &lsquo;A&ndash;Z&rsquo; and &lsquo;_&rsquo; and &lsquo; &rsquo;).
							</para>
						</important>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>&lt;title&gt;<replaceable>title</replaceable>&lt;/title&gt;</filename></term>
					<listitem>
						<para>
							Obviously enough, the book&#39;s title (for example, <emphasis>Server Configuration Guide</emphasis>). The title appears under the product name in both HTML and PDF editions. A title is required to build an RPM. When building a book as an RPM the title is used as the part of the file-name of the RPM package.
						</para>
						<important>
							<title>Important</title>
							<para>
								Because data in this tag also appears as part of the .rpm filename, this field can only contain upper- and lower-case un-accented letters and the underscore and space characters (ie &lsquo;a&ndash;z&rsquo;, &lsquo;A&ndash;Z&rsquo; and &lsquo;_&rsquo; and &lsquo; &rsquo;).
							</para>
						</important>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>&lt;subtitle&gt;<replaceable>subtitle</replaceable>&lt;/subtitle&gt;</filename></term>
					<listitem>
						<para>
							Again, plainly enough, the subtitle tag contains a book&#39;s subtitle: an alternative, and commonly explanatory title for the book (for example: <emphasis>Server Configuration Guide: Preparing Red Hat Enterprise Linux for Production Use</emphasis>). The subtitle appears under the title in both HTML and PDF editions. A subtitle is also required to make a book available as an RPM. When building a book as an RPM, the subtitle is used as the <computeroutput>Summary</computeroutput> in the RPM spec file. The <command>rpm -qi</command> returns the contents of several spec file fields, including the Summary field.
						</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>&lt;productnumber&gt;<replaceable>productnumber</replaceable>&lt;/productnumber&gt;</filename></term>
					<listitem>
						<para>
							The version number of the product the book covers, for example &lsquo;5.2&rsquo; for Red Hat Enterprise Linux 5.2 and &lsquo;4.3&rsquo; for JBoss EAP 4.3.
						</para>
						<para>
							Running the <command>create_book --name <replaceable>Book_Name</replaceable> --version <replaceable>version</replaceable></command> command correctly configures the product number.
						</para>
						<important>
							<title>Important</title>
							<para>
								Because data in this tag is used in the RPM spec file, this tag can only contain numbers and the full stop or period (ie &lsquo;0&ndash;9&rsquo; and &lsquo;.&rsquo;).
							</para>
						</important>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>&lt;edition&gt;<replaceable>edition</replaceable>&lt;/edition&gt;</filename></term>
					<listitem>
						<para>
							This is the edition number of the book. The first edition of the book should be 1.0 (you may like to use 0.y for pre-release versions of a book). Subsequent editions should increment the 1.y to indicate to readers that the book is a new edition. The edition changes the first two digits of the version number in the .rpm filename when building a book with the <command>tar</command> or <command>srpm</command> options.
						</para>
						<para>
							For example, setting the edition to <filename>1.2</filename> and building the book using the <command>make srpm-en-US</command> command, would create an RPM file named <filename><replaceable>productname</replaceable>-<replaceable>title</replaceable>-<replaceable>productnumber</replaceable>-en-US-1.2-0.src.rpm</filename>.
						</para>
						<para>
							Running the <command>create_book --name<replaceable> Book_Name</replaceable> --edition <replaceable>x</replaceable>.<replaceable>y</replaceable></command> command correctly configures the edition.
						</para>
						<important>
							<title>Important</title>
							<para>
								Because data in this tag sets the <parameter>Version</parameter> in the RPM spec file, this tag can only contain numbers and the full stop or period (ie &lsquo;0&ndash;9&rsquo; and &lsquo;.&rsquo;).
							</para>
						</important>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>&lt;pubsnumber&gt;<replaceable>pubsnumber</replaceable>&lt;/pubsnumber&gt;</filename></term>
					<listitem>
						<para>
							The pubsnumber changes the release number (the last digit) when building a book with the <filename>tar</filename> or <filename>srpm</filename> options. For example, setting the pubsnumber to <filename>1</filename> and building the book using the <command>make srpm-en-US</command> command, would create an RPM file named <filename><replaceable>productname</replaceable>-<replaceable>title</replaceable>-<replaceable>productnumber</replaceable>-en-US-<replaceable>edition</replaceable>-1.src.rpm</filename>.
						</para>
						<important>
							<title>Important</title>
							<para>
								Because data in this tag sets the <parameter>Release</parameter> in the RPM spec file, this tag can only contain numbers (ie &lsquo;0&ndash;9&rsquo;).
							</para>
						</important>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><filename>&lt;abstract&gt;&lt;para&gt;<replaceable>abstract</replaceable>&lt;/para&gt;&lt;/abstract&gt;</filename></term>
					<listitem>
						<para>
							A short overview and summary of the book&#39;s subject and purpose, traditionally no more than a paragraph long. The abstract appears before the table of contents in HTML editions and on the second page of PDF editions. When a book is built as an RPM, the abstract sets the <parameter>Description</parameter> field of the RPM&#39;s spec file. This makes the abstract for a package available via the <command>rpm -qi</command>.
						</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>
		
		<section id="sect-Users_Guide-Files_in_the_Book_directory-RPMs_Editions_Impressions_and_Versions">
			<title>RPMs, Editions, Impressions and Versions</title>
			<para>
				As noted above, the default Book_Info.xml used by Publican includes an <parameter>&lt;edition&gt;</parameter> tag.
			</para>
			<para>
				If you distribute a book as an RPM package, the data placed within this tag sets &#39;the first two digits of the version number in the .rpm filename&#39;.
			</para>
			<para>
				So, an edition of &#39;1.0&#39; becomes a version of &#39;1.0&#39;.
			</para>
			<para>
				Book_Info.xml also includes the <parameter>&lt;pubsnumber&gt;</parameter> tag. Any data placed within this tag changes the release number of RPM-packaged books.
			</para>
			<para>
				A book with an edition of 1.0 and a pubsnumber of 5, would be version 1.0, release 5 (1.0-5).
			</para>
			<para>
				The edition and pubsnumber are not tied to the <parameter>&lt;productnumber&gt;</parameter> tag also found in Book_Info.xml: productnumber denotes the version number of the product being documented or otherwise written about.
			</para>
			<para>
				It is entirely possible to have a 2nd edition of a book pertaining to a particular version of a product.
			</para>
			<para>
				In Bibliography, two copies of a book are the same edition if they are printed using substantially the same type-set master plates or pages. (&#39;Substantially&#39; offers some wiggle room for typo corrections and the like.)
			</para>
			<para>
				Book collectors routinely conflate &#39;first edition&#39; with &#39;first print run&#39;, while Bibliographers pay attention to the text commonly placed in the front matter of a book, which calls a 2nd print run off the same (or substantially the same) plates a &#39;1st edition, 2nd impression&#39; or &#39;1st edition, 2nd printing&#39;.
			</para>
			<para>
				We recommend following Bibliographic practice in this regard. When using Publican to re-publish a book from &#39;substantially the same XML&#39;, increment the <parameter>&lt;pubsnumber&gt;</parameter> tag, not the <parameter>&lt;edition&gt;</parameter> tag. It functions as a near-equivalent to the impression or printing number of traditional publishing.
			</para>
			<para>
				As for changing the Edition number, we recommend changing this in the same circumstances traditional publishers change the edition of a work: when it is revised and re-written significantly. What constitutes significant, and how much re-writing is needed to increment an Edition number by a whole number and how much is needed to increment it by one-tenth of a whole number, is a matter of editorial discretion.
			</para>
		</section>
		
		<section id="sect-Users_Guide-Files_in_the_Book_directory-Author_Group.xml">
			<title>Author_Group.xml</title>
			<para>
				<filename>Author_Group.xml</filename> is not required but is the standard place to record author, editor, artist and other credit details. The following is an example <filename>Author_Group.xml</filename> file:
			</para>
			
<programlisting language="xml"><xi:include href="extras/Author_Group.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
</programlisting>
			<para>
				<filename>Author_Group.xml</filename> does not have to contain all of the above information: include as much or as little as required.
			</para>
			<para>
				If you do not want or need <filename>Author_Group.xml</filename> included in a book, delete the following line from <filename>Book_Info.xml</filename> before building:
			</para>
			
<programlisting language="xml">&lt;xi:include href="Author_Group.xml" xmlns:xi="http://www.w3.org/2001/XInclude" /&gt;
</programlisting>
		</section>
		
		<section id="sect-Users_Guide-Files_in_the_Book_directory-Chapter.xml">
			<title>Chapter.xml</title>
			<para>
				The <filename>Chapter.xml</filename> file is a template for creating chapter files. Chapter files contain the content that make up a book. The following is a chapter template (<filename>Chapter.xml</filename>) that is created after running the <command>create_book</command> command. Note the <filename>DOCTYPE</filename> is set to <filename>chapter</filename>:
			</para>
			
<programlisting language="xml"><xi:include href="extras/Chapter.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
</programlisting>
			<para>
				This chapter has two sections, <filename>Section 1 Test</filename> and <filename>Section 2 Test</filename>. Please refer to <ulink url="http://docbook.org/tdg/en/html/chapter.html"></ulink> for further information about chapters.
			</para>
			<note>
				<title>Note</title>
				<para>
					The chapter file should be renamed to reflect the chapter subject. For example, a chapter on product installation could be named <filename>Installation.xml</filename>, whereas a chapter on setting up a piece of software would be better called <filename>Setup.xml</filename> or <filename>Configuration.xml</filename>.
				</para>
			</note>
		</section>
		
		<section id="sect-Users_Guide-Files_in_the_Book_directory-Book_Name.xml">
			<title>Book_Name.xml</title>
			<para>
				The <filename><replaceable>Book_Name</replaceable>.xml</filename> file contains <filename>xi:include</filename> directives to include the chapters for a book. Chapters are contained in separate XML files, and the <filename><replaceable>Book_Name</replaceable>.xml</filename> file brings them together into a single book.
			</para>
			<para>
				The following is an example <filename><replaceable>Book_Name</replaceable>.xml</filename> file. Note the <filename>DOCTYPE</filename> is set to <filename>book</filename>.
			</para>
			
<programlisting language="xml"><xi:include href="extras/Book_Name.xmlt" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
</programlisting>
			<para>
				This example loads the <computeroutput>Book_Info.xml</computeroutput>, <computeroutput>Preface.xml</computeroutput>, <computeroutput>Chapter.xml</computeroutput>, and <computeroutput>Appendix.xml</computeroutput> XML files.
			</para>
			<important>
				<title>Important</title>
				<para>
					The order in which chapters are listed matters. When this example book is built, Book_Info.xml will precede Preface.xml which will precede Chapter.xml, and so on.
				</para>
			</important>
			<para>
				The <filename><replaceable>Book_Name</replaceable>.xml</filename> file is not limited to using <filename>xi:include</filename> directives. Books can be created using a single XML file. The following is an example of a book created using a single XML file:
			</para>
			
<programlisting language="xml">&lt;book&gt;

&lt;chapter&gt;
&lt;title&gt;Chapter 1&lt;/title&gt;
	&lt;para&gt;
		A paragraph in Chapter 1.
	&lt;/para&gt;
	&lt;section id="section1"&gt;
	&lt;title&gt;Chapter 1 Section 1&lt;/title&gt;
		&lt;para&gt;
			A paragraph in Section 1.
		&lt;/para&gt;
	&lt;/section&gt;
	&lt;section id="section2"&gt;
	&lt;title&gt;Chapter 1 Section 2&lt;/title&gt;
		&lt;para&gt;
			A paragraph in Section 2.
		&lt;/para&gt;
	&lt;/section&gt;
&lt;/chapter&gt;

&lt;chapter&gt;
&lt;title&gt;Chapter 2&lt;/title&gt;
	&lt;para&gt;
		A paragraph in Chapter 2.
	&lt;/para&gt;
&lt;/chapter&gt;

&lt;/book&gt;
</programlisting>
			<para>
				This book contains two chapters. Chapter one contains two sections. Please refer to <ulink url="http://docbook.org/tdg/en/html/section.html"></ulink> for further information about sections, and <ulink url="http://docbook.org/tdg/en/html/book.html"></ulink> for further information about books.
			</para>
		</section>
		
		<section id="sect-Users_Guide-Files_in_the_Book_directory-Book_Name.ent">
			<title>Book_Name.ent</title>
			<para>
				The <filename><replaceable>Book_Name</replaceable>.ent</filename> file is used to define local entities. The <computeroutput>YEAR</computeroutput> and <computeroutput>HOLDER</computeroutput> entities are used for copyright information. You must define <computeroutput>YEAR</computeroutput> and <computeroutput>HOLDER</computeroutput> entities, otherwise the book will not build:
			</para>
			<para>
				
<screen><xi:include href="extras/Book_Name.ent" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
</screen>
			</para>
			<important>
				<title>Important</title>
				<para>
					Entities offer convenience but they should be used with extreme caution. Writing (for example) <sgmltag>&amp;FDS&semi;</sgmltag> instead of <application>Fedora Directory Server</application> saves the writer time but transformed entities do not appear in <filename>.po</filename> files. Complete translations of documents containing entities are, as a consequence, impossible.
				</para>
			</important>
			<para>
				If you define an entity &mdash; <sgmltag>&lt;!ENTITY LIFT "Liberty Installation and Formatting Tome"&gt;</sgmltag> &mdash; you can enter <sgmltag>&amp;LIFT&semi;</sgmltag> in your XML and it will appear as <emphasis>The Secret to Eternal Life</emphasis> every time the book is built to HTML, PDF or Text.
			</para>
			<para>
				Entities are not transformed when XML is converted to PO, however. Which means translators never see <emphasis>Liberty Installation and Formatting Tome</emphasis>. Instead they see <sgmltag>&amp;LIFT&semi;</sgmltag>, which they cannot translate.
			</para>
			<para>
				Consider something as simple as the following English sentence fragment being translated into a related language: German.
			</para>
			<blockquote>
				<para>
					As noted in the <emphasis>Liberty Installation and Formatting Tome</emphasis>, Chapter 3&hellip;
				</para>
			</blockquote>
			<para>
				A translation of this might be as follows:
			</para>
			<blockquote>
				<para>
					<foreignphrase>Wie in dem <emphasis>W&auml;lzer f&uuml;r die Installation und Formatierung von Liberty</emphasis>, Kapitel 3, erw&auml;hnt&hellip;</foreignphrase>
				</para>
			</blockquote>
			<para>
				Because there is no text missing, the title can be translated into elegant German, avoiding the multi-syllabic mega-word syndrome. Also, note the use of <foreignphrase>&lsquo;in dem&rsquo;</foreignphrase>, the correct pronoun when referring to a <foreignphrase>W&auml;lzer</foreignphrase> (tome).
			</para>
			<para>
				By contrast, if entities are used, the English would be
			</para>
			<blockquote>
				<para>
					As noted in the <sgmltag>&amp;LIFT&semi;</sgmltag>, Chapter 3&hellip;
				</para>
			</blockquote>
			<para>
				The translation of this would probably run thus:
			</para>
			<blockquote>
				<para>
					<foreignphrase>Wie in <sgmltag>&amp;LIFT&semi;</sgmltag>, Kapitel 3, erw&auml;hnt&hellip;</foreignphrase>
				</para>
			</blockquote>
			<para>
				And the presentation would be thus:
			</para>
			<blockquote>
				<para>
					<foreignphrase>Wie in <emphasis>Liberty Installation and Formatting Tome</emphasis>, Kapitel 3, erw&auml;hnt&hellip;</foreignphrase>
				</para>
			</blockquote>
			<para>
				This, of course, leaves the title in English, including words like Tome and Formatting that are unlikely to be understood. Also, the translator is forced to use the pronoun &lsquo;in&rsquo;, a more general construction that comes close to <foreignphrase>Denglisch or Angleutsch</foreignphrase>. Many German speakers consider this approach incorrect and almost all consider it inelegant.
			</para>
			<para>
				Equivalent problems emerge with a fragment such as this:
			</para>
			<blockquote>
				<para>
					However, a careful reading of the <emphasis>Liberty Installation and Formatting Tome</emphasis> afterword, shows that&hellip;
				</para>
			</blockquote>
			<para>
				With no text hidden behind an entity, a German translation of this might be:
			</para>
			<blockquote>
				<para>
					<foreignphrase>Jedoch ergibt ein sorgf&auml;ltiges Lesen des Nachworts f&uuml;r den <emphasis>W&auml;lzer f&uuml;r die Installation und Formatierung von Liberty</emphasis>, dass&hellip;</foreignphrase>
				</para>
			</blockquote>
			<para>
				If an entity was used to save the writer time, the translator has to deal with this:
			</para>
			<blockquote>
				<para>
					However, a careful reading of the <sgmltag>&amp;LIFT&semi;</sgmltag> afterword, shows that&hellip;
				</para>
			</blockquote>
			<para>
				And the translation would be subtly but importantly different:
			</para>
			<blockquote>
				<para>
					<foreignphrase>Jedoch ergibt ein sorgf&auml;ltiges Lesen des Nachworts f&uuml;r <sgmltag>&amp;LIFT&semi;</sgmltag>, dass&hellip;</foreignphrase>
				</para>
			</blockquote>
			<para>
				When presented to a reader, this would appear as follows:
			</para>
			<blockquote>
				<para>
					<foreignphrase>Jedoch ergibt ein sorgf&auml;ltiges Lesen des Nachworts f&uuml;r <emphasis>Liberty Installation and Formatting Tome</emphasis>, dass&hellip;</foreignphrase>
				</para>
			</blockquote>
			<para>
				Again, note the missing pronoun, <foreignphrase>&lsquo;den&rsquo;</foreignphrase>. This is inelegant but necessary since the translator can otherwise only guess which pronoun <foreignphrase>(der, die or das)</foreignphrase> to use, which would inevitably lead to error.
			</para>
			<para>
				Now multiply such problems by the 22 languages Publican currently supports. Using entities for anything other than the few non-translated strings currently supported is arguably a conscious effort to inhibit and reduce the quality of translations.
			</para>
		</section>
		
		<section id="sect-Users_Guide-Files_in_the_Book_directory-Revision_History.xml">
			<title>Revision_History.xml</title>
			<para>
				The <command>make</command> searches for the first XML file in the $(XML_LANG) directory containing a revhistory tag. Publican then uses that file to build the RPM revision history.
			</para>
			<important>
				<title>Important</title>
				<para>
					All dates must be in the correct RPM format, other formats will break the spec file creation.
				</para>
				<para>
					Mon Aug 4 2008
				</para>
			</important>
		</section>

	</section>
	
	<section id="sect-Users_Guide-Using_the_publican_package-Adding_Images">
		<title>Adding Images</title>
		<para>
			Use the <filename>images</filename> subdirectory in the <filename>en-<replaceable>US</replaceable>/</filename> directory to store images. Use <computeroutput>./images/<replaceable>image-name</replaceable></computeroutput> to insert images into a book. The following is an example that inserts the <filename>testimage.png</filename> image:
		</para>
		<para>
			
<programlisting language="xml">&lt;mediaobject&gt;
	&lt;imageobject&gt;
		&lt;imagedata fileref="./images/testimage.png" /&gt;
	&lt;/imageobject&gt;
	&lt;textobject&gt;&lt;phrase&gt;alternate text goes here&lt;/phrase&gt;&lt;/textobject&gt;
&lt;/mediaobject&gt;
</programlisting>
		</para>
		<para>
			<warning>
				<title>Image File Locations</title>
				<para>
					The build system only uses images in the <filename>en-<replaceable>US</replaceable>/images</filename> subdirectory. Other directories do not work.
				</para>
			</warning>
		</para>
	</section>
	
	<section id="sect-Users_Guide-Using_the_publican_package-Building_a_Book">
		<title>Building a Book</title>
		<para>
			To build a book:
		</para>
		<orderedlist>
			<listitem>
				<para>
					Confirm the <computeroutput>YEAR</computeroutput> and <computeroutput>HOLDER</computeroutput> entities have been configured in the <filename><replaceable>Book_Name</replaceable>.ent</filename> file, as per <xref linkend="sect-Users_Guide-Files_in_the_Book_directory-Book_Name.ent" />.
				</para>
			</listitem>
			<listitem>
				<para>
					Change into the root directory of the book. For example, if the book was named <computeroutput>Test_Book</computeroutput> and was located in the <filename>/books/</filename> directory, run the following command:
				</para>
				<para>
					
<screen>cd <replaceable>/books/Test_Book</replaceable>
</screen>
				</para>
			</listitem>
			<listitem>
				<para>
					Run the following command to check for any errors that would stop the book from building:
				</para>
				<para>
					
<screen>make test-en-US
</screen>
				</para>
			</listitem>
			<listitem>
				<para>
					Run the following command to build the book:
				</para>
				<para>
					
<screen>make <replaceable>format</replaceable>-en-US
</screen>
				</para>
				<para>
					Replace <replaceable>format</replaceable> with the desired format, for example, <computeroutput>html</computeroutput>.
				</para>
			</listitem>
		</orderedlist>
		<para>
			The following table lists commonly used <command>make</command> commands:
		</para>
		<segmentedlist>
			<segtitle>Command</segtitle>
			<segtitle>Result</segtitle>
			<seglistitem>
				<seg><command>make help</command></seg>
				<seg>List available <command>make</command> commands for building a book.</seg>
			</seglistitem>
			<seglistitem>
				<seg><command>make help_params</command></seg>
				<seg>List available parameters that can be set in the <filename>Makefile</filename>.</seg>
			</seglistitem>
			<seglistitem>
				<seg><command>make test-en-US</command></seg>
				<seg>Check that the book can be built correctly. Run the <command>make test</command> command before running any other <command>make</command> command, and before checking a book back into a repository (i.e. CVS or SVN).</seg>
			</seglistitem>
			<seglistitem>
				<seg><command>make html-en-US</command></seg>
				<seg>Build the book in HTML format. The HTML output will be located in the <filename><replaceable>Book_Name</replaceable>/tmp/en-<replaceable>US</replaceable>/html/</filename> directory.</seg>
			</seglistitem>
			<seglistitem>
				<seg><command>make html-single-en-US</command></seg>
				<seg>Build the book HTML format. The output will be a single HTML file located in the <filename><replaceable>Book_Name</replaceable>/tmp/en-<replaceable>US</replaceable>/html-single/</filename> directory.</seg>
			</seglistitem>
			<seglistitem>
				<seg><command>make htmlhelp-en-US</command></seg>
				<seg>Build the book in HTML HELP format. HTML HELP is a limited form of HTML, designed to be viewed regardless of your platform or Web browser. The output is located in the <filename><replaceable>Book_Name</replaceable>/tmp/en-<replaceable>US</replaceable>/htmlhelp/</filename> directory.</seg>
			</seglistitem>
			<seglistitem>
				<seg><command>make pdf-en-US</command></seg>
				<seg>Build the book in PDF format. This may not be supported on all systems.</seg>
			</seglistitem>
			<seglistitem>
				<seg><command>make clean</command></seg>
				<seg>Remove all files and folders in the <filename>tmp/</filename> subdirectory. The <filename>tmp/</filename> subdirectory is created after running a <command>make</command> command to build a book, such as <command>make html</command>.</seg>
			</seglistitem>
			<seglistitem>
				<seg><command>make web-srpm-en-US</command></seg>
				<seg>Create a source RPM to generate web based documentation RPMs from.</seg>
			</seglistitem>
			<seglistitem>
				<seg><command>make clean_ids</command></seg>
				<seg>Change all IDs to a standard format. This format is <replaceable>Book_Name-title</replaceable>. For example, a section with a title of <computeroutput>First Section</computeroutput> in a book named <computeroutput>Test_Book</computeroutput> will have the following ID after running <command>make clean_ids</command>: <computeroutput>&lt;section id="Test_Book-First_Section"&gt;</computeroutput></seg>
			</seglistitem>
		</segmentedlist>
		<warning>
			<title>Warning: <command>make clean_ids</command></title>
			<para>
				To make translation easier, <command>make clean_ids</command> uses the first four characters of the tag as a prefix for the ID. Consequently, you must check out the latest versions of the xml source and translations before running this command.
			</para>
			<para>
				Failing to have the po files checked out before running <command>make clean_ids</command> causes the XML and po files to slip out of sync. And this means all links in the po files have to be manually updated.
			</para>
			<para>
				As well, running <command>make clean_ids</command> removes all comments from the xml source.
			</para>
		</warning>
	</section>
	
	<xi:include href="Conditionaltagging.xml" xmlns:xi="http://www.w3.org/2001/XInclude"></xi:include>
	<section id="sect-Users_Guide-Using_the_publican_package-Pre_release_software_and_draft_documentation">
		<title>Pre-release software and draft documentation</title>
		<para>
			Completed documentation for pre-release software is not the same thing as draft documentation.
		</para>
		<para>
			Drafts are unfinished versions of a book or article, and their unfinished state is unrelated to the status of the software they document.
		</para>
		<para>
			In both circumstances, however, it is important to make the status of the software, documentation or both clear to users, developers, readers and reviewers.
		</para>
		<section id="sect-Users_Guide-Pre_release_software_and_draft_documentation-Denoting_pre_release_software">
			<title>Denoting pre-release software</title>
			<para>
				Documentation for pre-release software, especially pre-release software being distributed to testers, customers and partners, should carry a clear mark denoting the beta-status of the software.
			</para>
			<para>
				To create that mark do the following:
			</para>
			<procedure>
				<step>
					<para>
						Add the software&#39;s pre-release version number, or equivalent state information, to the subtitle in your <filename>Book_Info.xml</filename> file. Place this additional text in <sgmltag>&lt;remark&gt;</sgmltag> tags. For example:
					</para>
					
<programlisting language="xml">&lt;subtitle&gt;Using Red Hat Enterprise Warp Drive&lt;remark&gt; Version 1.1, Beta 2&lt;/remark&gt;&lt;/subtitle&gt;
</programlisting>
				</step>
				<step>
					<para>
						add <varname>SHOW_REMARKS</varname> to the <filename>Makefile</filename> and set it to &#39;1&#39;:
					</para>
					
<programlisting>SHOW_REMARKS = 1
</programlisting>
				</step>
			</procedure>
			
			<para>
				When your book is built with this text and setting, the software&#39;s status is displayed in clear and unmistakable fashion. PDF builds display the remark on their cover and title pages. HTML builds (both html and html-single) display the remark near the beginning of index.html
			</para>
			<para>
				Because this approach makes no changes to the information in <filename>Book_Info.xml</filename> used to generate RPMs, it also ensures there is no ambiguity in the RPM subsystem&#39;s operation.
			</para>
			<important>
				<title>Important</title>
				<para>
					It is the writer&#39;s responsibility to remove the <sgmltag>&lt;remark&gt;</sgmltag> tag and its contents and remove or turn off <varname>SHOW_REMARKS</varname> when documentation is updated for use with the release version of the software.
				</para>
			</important>
		</section>
		
		<section id="sect-Users_Guide-Pre_release_software_and_draft_documentation-Denoting_draft_documentation">
			<title>Denoting draft documentation</title>
			<para>
				Unfinished documentation made available to others for review should be labeled clearly as such.
			</para>
			<procedure>
				<step>
					<para>
						To add the draft watermark to your documentation add the <userinput>status="draft"</userinput> attribute to the <sgmltag>&lt;article&gt;</sgmltag>, <sgmltag>&lt;book&gt;</sgmltag> or <sgmltag>&lt;set&gt;</sgmltag> tag in your document&#39;s root node. For example:
					</para>
					
<programlisting language="xml">&lt;book status="draft"&gt;
</programlisting>
				</step>
			</procedure>
			
			<para>
				By default, your root node is the <sgmltag>&lt;book&gt;</sgmltag> tag in your <filename><replaceable>[book_name]</replaceable>.xml</filename> file.
			</para>
			<para>
				If you are working on an article or set, the root node is the <sgmltag>&lt;article&gt;</sgmltag> or <sgmltag>&lt;set&gt;</sgmltag> tag in <filename><replaceable>[book_name]</replaceable>.xml</filename>.
			</para>
			<para>
				Adding the <userinput>status="draft"</userinput> attribute causes each page of the document to show the draft watermark. This is by design.
			</para>
			<para>
				Even if you change only a portion of a work before sending it out for review, marking every page as draft will encourage reviewers to report errors or typos they spot in passing. It will also ensure non-reviewers who encounter the work do not mistake a draft for a finished version.
			</para>
		</section>
		
		<section id="sect-Users_Guide-Pre_release_software_and_draft_documentation-Denoting_draft_documentation_of_pre_release_software">
			<title>Denoting draft documentation of pre-release software</title>
			<para>
				To denote unfinished documentation of pre-release software properly simply do both previously noted procedures.
			</para>
		</section>

	</section>

</chapter>

