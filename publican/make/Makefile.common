#Makefile for Red Hat Documentation
#Created by Jeff Fearn <jfearn@redhat.com>
#    Copyright (C) 2008 Red Hat, Inc.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

# Default values, only set if not set in book Makefile
XML_LANG	?= en-US
XMLFILE		?= $(XML_LANG)/$(DOCNAME).xml
DOC_TYPE	?= Book
CONFIDENTIAL	?= 0
BREW_DIST	?= dist-5E-qu-candidate
WEB_BREW_DIST	?= docs-5E
EXTRA_DIRS	?= $(shell find $(XML_LANG) -type d | grep -vw CVS | grep -vw '.svn' | grep -vw images | sed -e 's/$(XML_LANG)//g'| sed -e 's/^\///g')

# Hardcoded values
DOCNAME		= $(shell grep -m1 '<title' $(XML_LANG)/$(DOC_TYPE)_Info.xml  | sed -e 's/<[/]*title>//g' | sed -e 's/^\s*//'  | sed -e 's/\s/_/g')
PRODUCT		= $(shell grep -m1 '<productname' $(XML_LANG)/$(DOC_TYPE)_Info.xml  | sed -e 's/<[/]*productname>//g' | sed -e 's/^\s*//'  | sed -e 's/\s/_/g')
PROD_VERSION	= $(shell awk '/<productnumber>(.*)<\/productnumber>/ { print $$1 }' $(XML_LANG)/$(DOC_TYPE)_Info.xml | sed -e 's/<[/]*productnumber>//g')
RPM_VERSION	= $(shell awk '/<edition>(.*)<\/edition>/ { print $$1 }' $(XML_LANG)/$(DOC_TYPE)_Info.xml | sed -e 's/<[/]*edition>//g')
RPM_RELEASE	= $(shell awk '/<pubsnumber>(.*)<\/pubsnumber>/ { print $$1 }' $(XML_LANG)/$(DOC_TYPE)_Info.xml | sed -e 's/<[/]*pubsnumber>//g')
XSLTPROC	= xsltproc
PWD		= $(shell pwd)
TRANSLATIONS	= $(XML_LANG) $(OTHER_LANGS)
FORMATS		= html htmlhelp html-single html-desktop pdf txt eclipse
BOOKNAME	= $(shell echo $(DOCNAME) | sed -e 's/_/ /g')

PRODUCT		?= Documentation

#### GAH! Dirty hack to Override values for use in building translated RPMs ###
### Required because the real variables where used in older versions
ifdef T_DOCNAME
DOCNAME = $(T_DOCNAME)
endif

ifdef T_PRODUCT
PRODUCT = $(T_PRODUCT)
endif

ifdef T_PROD_VERSION
PROD_VERSION = $(T_PROD_VERSION)
endif

ifdef T_RPM_RELEASE
RPM_RELEASE = $(T_RPM_RELEASE)
endif

###############################################################################
###############################################################################

COMMON_CONTENT	= $(COMMON_CONFIG)/Common_Content

# a comma seperated list of other languages
ifdef OTHER_LANGS
OTHER_LANGS_C	= $(shell echo $(OTHER_LANGS) | sed -e 's/ /,/g')
endif

ifdef EXTRA_DIRS
EXTRA_DIRS_C	= $(shell echo $(EXTRA_DIRS) | sed -e 's/ /,/g')
endif

# Is there a brand specific Makefile?
ifdef BRAND
ifneq "$(BRAND)" "common"
BRAND_MAKE	= $(shell if [ -f $(COMMON_CONFIG)/make/Makefile.$(BRAND) ]; then echo "1";else echo "0";fi)
endif
endif

# If there is include it
ifeq "$(BRAND_MAKE)" "1"
include $(COMMON_CONFIG)/make/Makefile.$(BRAND)
endif

STRICT		?= 0
LICENSE		?= GFDL

###############################################################################
######### SPEC File Vars ##############
###############################################################################
SPEC_NAME	?= $(PRODUCT)-$(DOCNAME)
ifdef XML_DESKTOP
SPEC_XSL	= $(COMMON_CONFIG)/xsl/dt_xml_spec.xsl
SUB_SPEC_XSL	= $(COMMON_CONFIG)/xsl/sub_package_xml.xsl
else
SPEC_XSL	= $(COMMON_CONFIG)/xsl/dt_htmlsingle_spec.xsl
SUB_SPEC_XSL	= $(COMMON_CONFIG)/xsl/sub_package_htmlsingle.xsl
endif

TAR_NAME	= $(PRODUCT)-$(DOCNAME)-$(PROD_VERSION)


include $(COMMON_CONFIG)/make/Makefile.templates

# Stub for books that need to pre generate things (Services_Plan)
# Validate strings used for rpm's match spec file constraints
pre::
	@if [[ "$(DOCNAME)" == "" ]]; then \
		echo; \
		echo "*ERROR: DOCNAME is mandator"; \
		echo "you must set <title> in $(XML_LANG)/$(DOC_TYPE)_Info.xml"; \
		exit 1; \
	fi
	@if [[ "$(DOCNAME)" =~ "^a-zA-Z_" ]]; then \
		echo; \
		echo "*ERROR: DOCNAME can only contain 'a-z', 'A-Z' and '_'*"; \
		echo "'$(DOCNAME)' is not valid"; \
		echo "Please edit <title> in $(XML_LANG)/$(DOC_TYPE)_Info.xml"; \
		exit 1; \
	fi
	@if [[ "$(PRODUCT)" == "" ]]; then \
		echo; \
		echo "*ERROR: PRODUCT is mandatory*"; \
		echo "You must set <productname> in $(XML_LANG)/$(DOC_TYPE)_Info.xml"; \
		exit 1; \
	fi
	@if [[ "$(PRODUCT)" == "Documentation" ]]; then \
		echo; \
		echo "*WARNING: PRODUCT is set to the default setting of 'Documentation'*"; \
		echo "Are you sure this is correct?"; \
		echo "Please edit <productname> in $(XML_LANG)/$(DOC_TYPE)_Info.xml if this is incorrect"; \
		echo; \
	fi
	@if [[ "$(PRODUCT)" =~ "[^a-zA-Z_]" ]]; then \
		echo; \
		echo "*ERROR: PRODUCT can only contain 'a-z', 'A-Z' and '_'*"; \
		echo "'$(PRODUCT)' is not valid"; \
		echo "Please edit <productname> in $(XML_LANG)/$(DOC_TYPE)_Info.xml"; \
		exit 1; \
	fi
	@if [[ "$(PROD_VERSION)" == "" ]]; then \
		echo; \
		echo "*ERROR: PROD_VERSION is compulsory*"; \
		echo "You must set <productnumber> in $(XML_LANG)/$(DOC_TYPE)_Info.xml"; \
		exit 1; \
	fi
	@if [[ "$(PROD_VERSION)" =~ "[^0-9.]" ]]; then \
		echo; \
		echo "*ERROR: PROD_VERSION can only contain '0-9' and '.'*"; \
		echo "'$(PROD_VERSION)' is not valid"; \
		echo "Please edit <productnumber> in $(XML_LANG)/$(DOC_TYPE)_Info.xml"; \
		exit 1; \
	fi
	@if [[ "$(RPM_VERSION)" == "" ]]; then \
		echo; \
		echo "*ERROR: RPM_VERSION is compulsory*"; \
		echo "You must set <edition> in $(XML_LANG)/$(DOC_TYPE)_Info.xml"; \
		exit 1; \
	fi
	@if [[ "$(RPM_VERSION)" =~ "[^0-9.]" ]]; then \
		echo; \
		echo "*ERROR: RPM_VERSION can only contain 0-9 and '.'*"; \
		echo "'$(RPM_VERSION)' is not valid";\
		echo "Please edit <edition> in $(XML_LANG)/$(DOC_TYPE)_Info.xml"; \
		exit 1; \
	fi
	@if [[ "$(RPM_RELEASE)" == "" ]]; then \
		echo; \
		echo "*ERROR: RPM_RELEASE is compulsory*"; \
		echo "You must set <pubsnumber> in $(XML_LANG)/$(DOC_TYPE)_Info.xml"; \
		exit 1; \
	fi
	@if [[ "$(RPM_RELEASE)" =~ "[^0-9]" ]]; then \
		echo; \
		echo "*ERROR: RPM_RELEASE can only contain 0-9*"; \
		echo "'$(RPM_RELEASE)' is not valid";\
		echo "Please edit <pubsnumber> in $(XML_LANG)/$(DOC_TYPE)_Info.xml"; \
		exit 1; \
	fi
	@if [ ! -d $(COMMON_CONTENT)/$(BRAND) ]; then \
		echo; \
		echo "*ERROR: Brand $(BRAND) is not installed*" ; \
		echo "Either install $(BRAND) or change to a valid Brand."; \
		echo "Installed Brands:" \
		echo "`ls $(COMMON_CONTENT)`"; \
		exit 1; \
	fi
	@for file in `find en-US -wholename '*/extras/*' -prune -o -name \*.xml -print`; do \
		if [ "$$(grep -l '<\!ENTITY' $$file)" ]; then \
			echo; \
			echo "*WARNING: Entities Declared in XML*"; \
			echo "Entities declared in XML files are excluded from all output."; \
			echo "Entities should be declared in $(XML_LANG)/$(DOCNAME).ent"; \
			echo "Declaration found in: $$file"; \
			echo; \
		fi; \
	done
	@echo "Processing, Product: $(PRODUCT), Version: $(PROD_VERSION), Edition: $(RPM_VERSION), Release: $(RPM_RELEASE)"

###############################################################################
### Special Place in hell for Jeff ###
###############################################################################
ifndef $(XML_LANG)_RPM_RELEASE
$(foreach L,$(OTHER_LANGS),$(eval ${L}_RPM_RELEASE = $(shell grep Project-Id-Version ${L}/$(DOC_TYPE)_Info.po | sed -e 's/^.*: \(.*\)\\n.*$$/\1/' )))
$(XML_LANG)_RPM_RELEASE = $(RPM_RELEASE)
endif

###############################################################################
### Build XML ###
###############################################################################
$(foreach L,$(TRANSLATIONS),$(eval $(call XML_Template,${L},$(DOCNAME))))

xml-all:$(foreach L,$(TRANSLATIONS),xml-${L})

###############################################################################
### Test XML  ###
###############################################################################
$(foreach L,$(TRANSLATIONS),$(eval $(call TEST_Template,${L})))

test-all: $(foreach L,$(TRANSLATIONS), test-${L})

###############################################################################
### Build Formats ###
###############################################################################
$(foreach format, $(FORMATS), \
	$(foreach L,$(TRANSLATIONS), \
		$(eval $(call BUILD_Template,${format},${L},${format}.xsl))))

$(foreach format, $(FORMATS), $(eval $(call ALL_Template,${format})))

###############################################################################
### Publish Formats  ###
###############################################################################
$(foreach format, $(FORMATS), \
	$(foreach L,$(TRANSLATIONS), \
		$(eval $(call PUBLISH_template,${format},${L}))))

$(foreach format, $(FORMATS), $(eval $(call ALL_Template,publish-${format})))

###############################################################################
### Desktop RPMS  ###
###############################################################################
$(foreach L,$(TRANSLATIONS), $(eval $(call TARDIR_Template,${L})))
$(foreach L,$(TRANSLATIONS), $(eval $(call SPEC_Template,${L})))
$(foreach L,$(TRANSLATIONS), $(eval $(call TAR_Template,${L})))
$(foreach L,$(TRANSLATIONS), $(eval $(call SRPM_Template,${L})))


###############################################################################
### Brew Desktop rpm  ###
###############################################################################
$(foreach L,$(TRANSLATIONS), $(eval $(call BREW_Template,${L})))
$(foreach L,$(TRANSLATIONS), $(eval $(call BREW_Scratch_Template,${L})))
$(foreach L,$(TRANSLATIONS), $(eval $(call BREW_Report_Template,${L})))

###############################################################################
# Web Site SRPMs
###############################################################################
$(foreach L,$(TRANSLATIONS),$(eval $(call WEB_SRPM_Template,${L})))
$(foreach L,$(TRANSLATIONS),$(eval $(call Publish-WEB_Template,${L})))
web-srpm-all:: $(foreach L,$(TRANSLATIONS), web-srpm-${L})


###############################################################################
### Brew Web Site rpm  ###
###############################################################################
$(foreach L,$(TRANSLATIONS), $(eval $(call WEB_BREW_Template,${L})))
$(foreach L,$(TRANSLATIONS), $(eval $(call WEB_BREW_Scratch_Template,${L})))
$(foreach L,$(TRANSLATIONS), $(eval $(call WEB_BREW_Report_Template,${L})))
web-brew-all:: $(foreach L,$(TRANSLATIONS), web-brew-${L})

###############################################################################
# SECTION: PO FILES 
###############################################################################

# Create update-po-LANG for all Translations
$(foreach L,$(OTHER_LANGS),$(eval $(call PO_Update_Template,${L},$(DOCNAME))))

# Depend on update-po-LANG for all Translations
update-po-all:: $(foreach L,$(OTHER_LANGS),update-po-${L})

# Ensure pot is up to date
update-pot::
	@echo "START: update-pot `date`"
	@if [ ! -d pot ]; then mkdir -p pot; fi
ifneq "$(EXTRA_DIRS)" ""
	@cd pot && mkdir -p $(EXTRA_DIRS)
endif
	@cd $(XML_LANG) && for xml_file in `find . -wholename '*/extras/*' -prune -o -name \*.xml -print | sed -e 's/^\.\///g' | sort`; do \
		pot_file=`echo $$xml_file | sed -e 's/\.xml/\.pot/'`;\
		echo "	$$xml_file => $$pot_file";\
		xml2pot $$xml_file | msguniq  > ../pot/$$pot_file;\
	done;
	@echo "END: update-pot `date`"


# Create report-total-LANG for all Translations
$(foreach L,$(TRANSLATIONS),$(eval $(call PO_Report_Totals_Template,${L})))

report-total-all:: $(foreach L,$(TRANSLATIONS), report-total-${L})

# Create report-LANG for all Translations
$(foreach L,$(TRANSLATIONS),$(eval $(call PO_Report_Template,${L})))

report-all::
	@echo "START: $@ `date`"

report-all:: $(foreach L,$(TRANSLATIONS), report-${L})
	@echo "END: $@ `date`"

publish-report::
	@echo "START: publish-report `date`"

publish-report:: report-all
	@mkdir -p tmp/Reports
	@mkdir -p tmp/reports
	@if [ ! -d pot ]; then \
		echo "Invalid Report request, pot directory does not exist.";\
		exit 2; \
	fi;
	@if [ `find pot -name "*.pot" | wc -l` -le "0" ]; then \
		echo "Invalid Report request, no POT files exist."; \
		exit 2; \
	fi
	@po2sgml --report `find pot -name \*.pot | sort` >& tmp/reports/$(XML_LANG).txt
	@sed -i -e 's/^$(XML_LANG)\///g' tmp/reports/$(XML_LANG).txt
	@sed -i -e 's/\.pot/\.xml/g' tmp/reports/$(XML_LANG).txt
	@cd tmp/reports && StSe_Reports --book=$(DOCNAME) --src_lang=$(XML_LANG) --product=$(PRODUCT) --version=$(PROD_VERSION)
# copy original common images, then copy translated images over the top
	@mkdir -p tmp/Reports/Common_Content
	@cp -rf $(COMMON_CONTENT)/common/$(XML_LANG)/css tmp/Reports/Common_Content/.
	-@cp -rf $(COMMON_CONTENT)/common/$(XML_LANG)/images  tmp/Reports/Common_Content/.
	@mkdir -p publish/Reports/$(PRODUCT)/$(PROD_VERSION)/$(DOCNAME)
	@cp -rf tmp/Reports/* publish/Reports/$(PRODUCT)/$(PROD_VERSION)/$(DOCNAME)/.
	@echo "END: publish-report `date`"


###############################################################################
# WARNING: Experimental!
# This target attempts to updtate the lang attribute in the src xml
# so that only languages with 100% translation are included
###############################################################################

update_includes:
	@echo "START: $@ `date`"
ifdef DEFAULT_LANGS
	@for file in `ls $(XML_LANG)/*.xml | sort`; do \
		$(XMLCLEAN) -U -u -in $$file -out $$file -lang $(XML_LANG) --trans $(OTHER_LANGS_C) --defaults $(DEFAULT_LANGS); \
	done
else
	@for file in `ls $(XML_LANG)/*.xml | sort`; do \
		$(XMLCLEAN) -U -u -in $$file -out $$file -lang $(XML_LANG) --trans $(OTHER_LANGS_C); \
	done
endif
	@echo "END: $@ `date`"

###############################################################################
# Modify the id's of tags.
# WARNING: this changes the source xml
#          It updates xrefs in translations.
###############################################################################
clean_ids:
	@echo "START: $@ `date`"
	@cd $(XML_LANG) && \
	for file in `find -wholename '*/extras/*' -prune -o -name \*.xml -print | sed -e 's/^\.\///' | sort`; do \
		echo "	$$file"; \
		$(XMLCLEAN) -U -in $$file -out $$file -book $(DOCNAME) -cleanids ; \
	done && cd ..;
	@echo "END: $@ `date`"


###############################################################################
# Remove temporary files
###############################################################################
clean::
	@echo "START: $@ `date`"
	@rm -rf tmp publish
	@echo "END: $@ `date`"

###############################################################################
# Clean all the books in this set
###############################################################################
clean_set_books::
	@echo "START: $@ `date`"
	@for dir in $(BOOKS); do \
		if [ -d "$$dir" ] ; then \
			pushd $$dir > /dev/null; \
			make clean; \
			popd > /dev/null; \
		else \
			echo "CAN'T CHANGE DIRS TO $$dir FOR CLEANING" ; \
		fi; \
	done;
	@echo "END: $@ `date`"

###############################################################################
# build all the books in this set
###############################################################################
set_books::
	@echo "START: $@ `date`"
	@for dir in $(BOOKS); do \
		if [ -d "$$dir" ] ; then \
			pushd $$dir > /dev/null; \
			make clean; \
			make clean_ids; \
			make xml-all; \
			popd > /dev/null; \
		else \
			echo "$$dir DIRECTORY NOT FOUND"; \
		fi; \
		for lang in $(TRANSLATIONS); do mkdir -p tmp/$$lang/xml; \
			cp -rf $$dir/tmp/$$lang/xml tmp/$$lang/xml/$$dir; \
			if [ -d "tmp/$$lang/xml/$$dir/images" ]; then \
				mkdir -p tmp/$$lang/xml/images; \
				mv -f tmp/$$lang/xml/$$dir/images/* tmp/$$lang/xml/images/.; \
				rm -rf tmp/$$lang/xml/$$dir/images; \
			fi; \
		done; \
	done;
	@echo "END: $@ `date`"

get_books::
	@echo "Start $@ `date`"
	@if [[ "$(BOOKS)" == "" ]]; then \
		echo "BOOKS is empty, you need to set this!"; \
	fi
	@for dir in $(BOOKS); do \
		if [ ! -d "$$dir" ] ; then \
			echo "Fetching $$dir"; \
			if [[ "$(SET_REPO_TYPE)" == "SVN" ]]; then \
				svn export --quiet $(SET_REPO)/$$dir $$dir; \
			else \
				echo "Uknown repo type: '$(SET_REPO_TYPE)'"; \
				echo "You did set SET_REPO_TYPE? run make help_params for more info"; \
				exit 4; \
			fi; \
		else \
			echo "$$dir exists"; \
		fi; \
	done;
	@echo "END: $@ `date`"

realclean::
	@echo "Start $@ `date`"
	@for dir in $(BOOKS); do \
		if [ -d "$$dir" ] ; then \
 			rm -rf $$dir; \
		fi; \
	done;
	@rm -rf tmp
	@echo "End $@ `date`"

###############################################################################
# Make a pom file for gay maven
###############################################################################

pom::
	@echo "Start $@ `date`"
	@cp $(COMMON_CONFIG)/maven/pom.xml .
	@sed -i -e 's/DOC_NAME/$(DOCNAME)/' pom.xml
	@sed -i -e 's/BOOK_NAME/$(BOOKNAME)/' pom.xml
	@echo "End $@ `date`"


###############################################################################
# Help the user
###############################################################################

help_params::
	@echo
	@echo "Following is a list of the parameters that can be set in the Book's Makefile"
	@echo
	@echo "BOOKS: For Sets this defines the Books it contains. Currently: $(BOOKS)"
	@echo
	@echo "BRAND:  Brand to style output with. Currently: $(BRAND)"
	@echo
	@echo "BREW_DIST: brew tag for desktop rpms. Currently: $(BREW_DIST)"
	@echo
	@echo "CATALOGS: Override the system DTD catalog path. Currently: $(CATALOGS)"
	@echo
	@echo "CHUNK_FIRST:  Controls chunking of first sections, defaults to 1. Currently: $(CHUNK_FIRST)"
	@echo
	@echo "CHUNK_SECTION_DEPTH:  Override the max section depth to chunk to. Currently: $(CHUNK_SECTION_DEPTH)"
	@echo
	@echo "COMMON_CONTENT: Path to publican common files. Currently: $(COMMON_CONTENT)"
	@echo
	@echo "CONFIDENTIAL:  is this book confidential? Currently: $(CONFIDENTIAL)"
	@echo
	@echo "DEFAULT_LANGS: Languages that should be included in xi:include even if the translation isn't 100%%."
	@echo "	Used in update_includes. Currently: $(DEFAULT_LANGS)"
	@echo
	@echo "DESKTOP: Use the desktop CSS. Currently: $(DESKTOP)"
	@echo
	@echo "DOC_TYPE: Defaults to Book, can also be Article or Set. Currently: $(DOC_TYPE)"
	@echo
	@echo "DOC_URL: URL for top right link in html. Currently: $(DOC_URL)"
	@echo
	@echo "GENERATE_SECTION_TOC_LEVEL: Include a TOC at the given section level. Currently: $(GENERATE_SECTION_TOC_LEVEL)"
	@echo
	@echo "IGNORED_TRANSLATIONS: When building replace any languages in this list with the source langauge text"
	@echo "	This allows you to work on translations without shipping incomplete translations. Currently: $(IGNORED_TRANSLATIONS)"
	@echo
	@echo "OTHER_LANGS:  space seperated list of language locales. Currently: $(OTHER_LANGS)"
	@echo
	@echo "PRODUCT: Product this book is associated with. Currently: $(PRODUCT)"
	@echo "	When this book is published it will be nested in a directory named after the product"
	@echo
	@echo "PROD_URL: URL for top left link in html. Currently: $(PROD_URL)"
	@echo
	@echo "SRC_URL: URL for the public src directory. Currently: $(SRC_URL)"
	@echo
	@echo "SHOW_REMARKS:  0 or 1. Display contents of remark tags in output? Currently $(SHOW_REMARKS)"
	@echo
	@echo "TOC_SECTION_DEPTH:  How many levels of sections should be included in the main TOC? Currently: $(TOC_SECTION_DEPTH)"
	@echo
	@echo "WEB_BREW_DIST: brew tag to use for web rpms. Currently: $(WEB_BREW_DIST)"
	@echo
	@echo "XML_DESKTOP: Use XML for the desktop package instead of the default html-single. Currently: $(XML_DESKTOP)"
	@echo
	@echo "XMLFILE: main XML file. Currently: $(XMLFILE)"
	@echo
	@echo "XML_LANG: source language of xml. Currently: $(XML_LANG)"
	@echo
	@echo "USE_XALAN: test xalan for xslt. Currently: $(XML_LANG)"
	@echo

help_internals::
	@echo
	@echo "These variables are used internally by publican and are set automatically."
	@echo
	@echo "BRAND_MAKE: Path to a brand specific Makefile. Which is used to override internals. Currently: $(BRAND_MAKE)"
	@echo
	@echo "DOCNAME: Name of main Book file. Also used as publishing directory. Currently: $(DOCNAME)"
	@echo
	@echo "EMBEDTOC: Embed the Web Site NAV Bar in the HTML. Currently: $(EMBEDTOC)"
	@echo
	@echo "EXTRA_DIRS: Helps handle nested directories."
	@echo
	@echo "EXTRA_DIRS_C: Comma seperated list of EXTRA_DIRS."
	@echo
	@echo "FORMATS: Output formats currently supported. Currently: $(FORMATS)."
	@echo
	@echo "OTHER_LANGS_C: Comma seperated list of non-source languages."
	@echo
	@echo "PWD: present working directory."
	@echo
	@echo "PROD_VERSION: Version of the PRODUCT, retrieved from productnumber tag in Info file. Currently: $(PROD_VERSION)"
	@echo
	@echo "RPM_VERSION: Edition number of this book, fetched from edition in Info file. Currently: $(RPM_VERSION)"
	@echo
	@echo "RPM_RELEASE: release number of this book, fetched from pubsnumber in Info file. Currently: $(RPM_RELEASE)"
	@echo
	@echo "SPEC_NAME: Used to determine names for tar and rpm files. Currently: $(SPEC_NAME)"
	@echo
	@echo "SPEC_XSL: The xsl file to use to generate the desktop rpm spec file."
	@echo
	@echo "SUB_SPEC_XSL: Was used to set which xsl file to use to generate sub packages for translations. Kept arond just in case!"
	@echo
	@echo "TAR_NAME: Shortcut for the TAR name."
	@echo
	@echo "TRANSLATIONS: List of all langages, XML_LANG + OTHER_LANGS. No longer override-able."
	@echo
	@echo "XMLCLEAN: Program to use for pre-processing xml. Currently: $(XMLCLEAN)."
	@echo
	@echo "XMLPOMERGE: Program used to merge po and source xml in to translated xml. Currently: $(XMLPOMERGE)."
	@echo
	@echo "XSLTPROC: XSLT processor. Currently: $(XSLTPROC)."
	@echo
	@echo "XALAN: Comman line to use when testing XALAN. Currently: $(XALAN)."
	@echo

# TODO: Update this
# grep -hoP '^[^\s\.]*\:+' * | sort -u
# plus the loops for format and lang
help::
	@echo "Publican Help Text."
	@echo
	@echo "<FORMAT> is replaced by an output format."
	@echo "	Current output formats: $(FORMATS)"
	@echo
	@echo "<LANG>-<LOC> is replaced by a language code"
	@echo "	Current languages: $(TRANSLATIONS)"
	@echo
	@echo "List of make targets."
	@echo
	@echo "<FORMAT>-<LANG>-<LOC>"
	@echo "	Generate the format for the given language."
	@echo "	e.g. html-en-US, pdf-de-DE"
	@echo
	@echo "<FORMAT>-all"
	@echo "	Generate the format for all languages."
	@echo "	e.g. html-all, pdf-all"
	@echo
	@echo "brew-<LANG>-<LOC>"
	@echo "	Build the desktop SRPM for the given langauge and then push it to Brew."
	@echo "	Current Brew tag is: $(BREW_DIST)"
	@echo
	@echo "brew-scratch -<LANG>-<LOC>"
	@echo "	Build the desktop SRPM for the given langauge and then push it to Brew as a scratch build."
	@echo "	Current Brew tag is: $(BREW_DIST)"
	@echo
	@echo "brew-report-<LANG>-<LOC>"
	@echo "	Report on the latest desktop packages in Brew."
	@echo "	Current tag is: $(BREW_DIST)"
	@echo
	@echo "clean"
	@echo "	Remove temporary files"
	@echo
	@echo "clean_ids: DANGER This changes your source XML and PO files"
	@echo "	Modify tag ID's to standard format. Updates xrefs"
	@echo
	@echo "clean_set_books"
	@echo "	For Sets of Books, this will run 'make clean' for all the Books."
	@echo
	@echo "help"
	@echo "	Display this help message."
	@echo
	@echo "help_params"
	@echo "	Display information about parameters that can be set in the Books Makefile."
	@echo
	@echo "help_internals"
	@echo "	Display information about parameters that can NOT be set in the Books Makefile."
	@echo
	@echo "pom"
	@echo "	Create a pom.xml file for use with maven."
	@echo
	@echo "pre"
	@echo "	Special target to allow scripts to be run before any other targets are built."
	@echo
	@echo "publish-<FORMAT>-<LANG>-<LOC>"
	@echo "	Run the <FORMAT>-<LANG>-<LOC> target, then copy all publishable output"
	@echo "	to a directory for publishing. Use with DocBot."
	@echo
	@echo "publish-<FORMAT>-all"
	@echo "	Generate the format for all languages, then copy all publishable output"
	@echo "	to a directory for publishing. "
	@echo "	e.g. publish-html-all, publish-pdf-all"
	@echo
	@echo "publish-report"
	@echo "	Run report-all then copy the output to the publish directory."
	@echo
	@echo "publish-web-<LANG>-<LOC>"
	@echo "	Run web-<LANG>-<LOC>, used when building binary rpm."
	@echo
	@echo "report-<LANG>-<LOC>"
	@echo "	Generate the translation status files for <LANG>-<LOC>."
	@echo
	@echo "report-all"
	@echo "	Run report-<LANG>-<LOC> for all languages."
	@echo
	@echo "report-total-<LANG>-<LOC>"
	@echo "	Display the translation status for the given language on the command line."
	@echo
	@echo "report-total-all"
	@echo "	Run report-total-<LANG>-<LOC> for all languages."
	@echo
	@echo "set_books"
	@echo "	For Sets of Books this will run 'make xml-all' for all the Books in that Set."
	@echo
	@echo "spec-<LANG>-<LOC>"
	@echo "	Generate the Desktop RPM Spec file for the given language."
	@echo
	@echo "srpm-<LANG>-<LOC>"
	@echo "	Generate the Desktop SRPM for the given language."
	@echo
	@echo "tar-<LANG>-<LOC>"
	@echo "	Generate the tar file used in the Desktop SRPM for the given language."
	@echo
	@echo "tardir-<LANG>-<LOC>"
	@echo "	Creates the directory structure and content for tar-<LANG>-<LOC>."
	@echo
	@echo "test-<LANG>-<LOC>"
	@echo "	Validate the XML for the supplied language."
	@echo
	@echo "test-all"
	@echo "	Run test-<LANG>-<LOC> for all languages."
	@echo
	@echo "update_includes: DANGER This updates your source XML"
	@echo "	DANGER EXPERIMENTAL This could cause you a lot of heart ache and extra work."
	@echo "	Modify all xi:include tags to exclude langauges that are not 100%% translated."
	@echo
	@echo "update-po-<LANG>-<LOC>"
	@echo "	Update the PO files for the supplied language."
	@echo
	@echo "update-po-all"
	@echo "	Run update-po-<LANG>-<LOC> for all languages using the current POT files."
	@echo
	@echo "update-pot"
	@echo "	Update the POT files."
	@echo
	@echo "web-srpm-<LANG>-<LOC>"
	@echo "	Creates the web SRPM for the supplied language."
	@echo
	@echo "web-srpm-all"
	@echo "	Runs web-srpm-<LANG>-<LOC> for all languages."
	@echo
	@echo "web-brew-<LANG>-<LOC>"
	@echo "	Build the web SRPM for the given langauge and then push it to Brew."
	@echo "	Current Brew tag is: $(WEB_BREW_DIST)"
	@echo
	@echo "web-brew-scratch-<LANG>-<LOC>"
	@echo "	Build the web SRPM for the given langauge and then push it to Brew as a scratch build."
	@echo "	Current Brew tag is: $(WEB_BREW_DIST)"
	@echo
	@echo "web-brew-report-<LANG>-<LOC>"
	@echo "	Report on the latest web packages in Brew."
	@echo "	Current tag is: $(WEB_BREW_DIST)"
	@echo
	@echo "xml-<LANG>-<LOC>"
	@echo "	Generate a working copy of the XML for the supplied language."
	@echo
	@echo "xml-all"
	@echo "	Run xml-<LANG>-<LOC> for all languages."
	@echo

