#Makefile for Red Hat Documentation
#Created by Jeff Fearn <jfearn@redhat.com>
#    Copyright (C) 2008 Red Hat, Inc.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

# Default values, only set if not set in book Makefile
XMLFILE		?= $(XML_LANG)/$(DOCNAME).xml
DOC_TYPE	?= Book
VERSION		?= $(shell awk '/<issuenum>(.*)<\/issuenum>/ { print $$1 }' $(XML_LANG)/$(DOC_TYPE)_Info.xml | sed -e 's/<[/]*issuenum>//g')
RELEASE		?= $(shell awk '/<productnumber>(.*)<\/productnumber>/ { print $$1 }' $(XML_LANG)/$(DOC_TYPE)_Info.xml | sed -e 's/<[/]*productnumber>//g')
MKPOT		?= mkxpot
XSLTPROC	?= xsltproc
PWD		= $(shell pwd)
CONFIDENTIAL	?= 0
BREW_DIST	?= dist-5E-qu-candidate
TRANSLATIONS	?= $(XML_LANG) $(OTHER_LANGS)
EXTRA_DIRS	?= $(shell find $(XML_LANG) -type d | grep -v CVS | grep -v '.svn' | grep -v images | sed -e 's/$(XML_LANG)//g'| sed -e 's/^\///g')
XMLCLEAN	?= xmlClean
PRODUCT		?= Documentation
CATEGORY	?= User Guide

###############################################################################
######### SPEC File Vars ##############
###############################################################################
SPEC_NAME	= $(PRODUCT)-$(DOCNAME)
SPEC_XSL	?= $(COMMON_CONFIG)/xsl/spec.xsl
SUB_SPEC_XSL	?= $(COMMON_CONFIG)/xsl/sub_package.xsl
BUILD_NAME	= $(SPEC_NAME)-$(VERSION)
TAR_NAME	= $(BUILD_NAME)-$(RELEASE)

###############################################################################
###############################################################################

COMMON_CONTENT	= $(COMMON_CONFIG)/Common_Content

# a comma seperated list of other languages
ifdef OTHER_LANGS
OTHER_LANGS_C	?= $(shell echo $(OTHER_LANGS) | sed -e 's/ /,/g')
endif

ifdef EXTRA_DIRS
EXTRA_DIRS_C	?= $(shell echo $(EXTRA_DIRS) | sed -e 's/ /,/g')
endif

# Is there a brand specific Makefile?
ifdef BRAND
BRAND_MAKE	= $(shell if [ -f $(COMMON_CONFIG)/make/Makefile.$(BRAND) ]; then echo "1";else echo "0";fi)
endif

# If there is include it
ifeq "$(BRAND_MAKE)" "1"
include $(COMMON_CONFIG)/make/Makefile.$(BRAND)
endif

include $(COMMON_CONFIG)/make/Makefile.templates

# Stub for books that need to pre generate things (Services_Plan)
# Validate strings used for rpm's match spec file constraints
pre::
	@if [[ "$(PRODUCT)" == "Documentation" ]]; then \
		echo; \
		echo "WARNING: PRODUCT is set to the default setting of 'Documentation', are you sure this is correct?"; \
		echo "	Run 'make help_params' for more information on this setting"; \
		echo; \
	fi
	@if [[ "$(VERSION)" == "" ]]; then \
		echo; \
		echo "ERROR: VERSION is compulsory, you must set <issuenum> in your $(DOC_TYPE)_Info.xml file"; \
		exit 1; \
	fi
	@if [[ "$(VERSION)" =~ "[^0-9.]" ]]; then \
		echo; \
		echo "ERROR: VERSION can only contain '0-9' and '.'! '$(VERSION)' is not valid, please edit <issuenum> in your $(DOC_TYPE)_Info.xml file"; \
		exit 1; \
	fi
	@if [[ "$(RELEASE)" == "" ]]; then \
		echo; \
		echo "ERROR: RELEASE is compulsory, you must set <productnumber> in your $(DOC_TYPE)_Info.xml file"; \
		exit 1; \
	fi
	@if [[ "$(RELEASE)" =~ "[^0-9.]" ]]; then \
		echo; \
		echo "ERROR: RELEASE can only contain 0-9 and '.'! '$(RELEASE)' is not valid, please edit <productnumber> in your $(DOC_TYPE)_Info.xml file"; \
		exit 1; \
	fi
	@if [ ! -d $(COMMON_CONTENT)/$(BRAND) ]; then \
		echo; \
		echo "ERROR: Brand $(BRAND) is not installed. Either install $(BRAND) or change to a valid Brand."; \
		exit 1; \
	fi


###############################################################################
### PUBLISH HTML ###
###############################################################################

# Create a fake publish-html-LANG rule for every Translation
$(foreach L,$(TRANSLATIONS),$(eval $(call PUBLISH_template,html,${L})))

# depened on publish-html-LANG for all Translations
publish-html-all:: $(foreach L,$(TRANSLATIONS),publish-html-${L})

# A seperate rule for origal language
publish-html:: publish-html-$(XML_LANG)

###############################################################################
### PUBLISH HTML SINGLE ###
###############################################################################

# Create a fake publish-html-LANG rule for every Translation
$(foreach L,$(TRANSLATIONS),$(eval $(call PUBLISH_template,html-single,${L})))

# depened on publish-html-LANG for all Translations
publish-html-single-all:: $(foreach L,$(TRANSLATIONS),publish-html-single-${L})

# A seperate rule for origal language
publish-html-single:: publish-html-single-$(XML_LANG)

###############################################################################
### PUBLISH ECLIPSE ###
###############################################################################

# Create a fake publish-eclipse-LANG rule for every Translation
$(foreach L,$(TRANSLATIONS),$(eval $(call PUBLISH_template,eclipse,${L})))

# depened on publish-eclipse-LANG for all Translations
publish-eclipse-all:: $(foreach L,$(TRANSLATIONS),publish-eclipse-${L})

# A seperate rule for origal language
publish-eclipse:: publish-eclipse-$(XML_LANG)

###############################################################################
### PUBLISH HTMLHELP ###
###############################################################################

# Create a fake publish-html-LANG rule for every Translation
$(foreach L,$(TRANSLATIONS),$(eval $(call PUBLISH_template,htmlhelp,${L})))

# depened on publish-html-LANG for all Translations
publish-htmlhelp-all:: $(foreach L,$(TRANSLATIONS),publish-htmlhelp-${L})

# A seperate rule for origal language
publish-htmlhelp:: publish-htmlhelp-$(XML_LANG)

###############################################################################
### PUBLISH PDF ###
###############################################################################

# Create publish-pdf-LANG for all Translations
$(foreach L,$(TRANSLATIONS),$(eval $(call PUBLISH_template,pdf,${L})))

# Depend on publish-pdf-LANG for all Translations
publish-pdf-all:: $(foreach L,$(TRANSLATIONS),publish-pdf-${L})

# A seperate rule for original language
publish-pdf:: publish-pdf-$(XML_LANG)

###############################################################################
### PUBLISH TXT ###
###############################################################################

# Create publish-pdf-LANG for all Translations
$(foreach L,$(TRANSLATIONS),$(eval $(call PUBLISH_template,txt,${L})))

# Depend on publish-pdf-LANG for all Translations
publish-txt-all:: $(foreach L,$(TRANSLATIONS),publish-txt-${L})

# A seperate rule for original language
publish-txt:: publish-txt-$(XML_LANG)	

###############################################################################
### PUBLISH RPM ###
###############################################################################

publish-srpm:: srpm
	@mkdir -p publish
	@cp -rf tmp/rpm/SRPMS publish/.

###############################################################################
### PUBLISH TAR ###
###############################################################################

# A seperate rule for original language
publish-tar:: tar
	@mkdir -p publish/tar
	@cp tmp/tar/$(TAR_NAME).tgz publish/tar/.

publish-crazy:: publish-html-all publish-html-single-all publish-eclipse-all publish-htmlhelp-all publish-pdf-all publish-txt-all publish-srpm publish-tar
	@echo "CRAZINESS!!!!"


###############################################################################
# SECTION: BUILDING 
###############################################################################

# Create xml-LANG for all Translations
$(foreach L,$(TRANSLATIONS),$(eval $(call XML_Template,${L},$(DOCNAME))))

xml-all::$(foreach L,$(TRANSLATIONS),xml-${L})

###############################################################################
### BUILDING HTML ###
###############################################################################

# Create html-LANG for all Translations
$(foreach L,$(TRANSLATIONS),$(eval $(call BUILD_Template,html,${L},main-html.xsl)))

# Depend on html-LANG for all Translations
html-all:: $(foreach L,$(TRANSLATIONS),html-${L})

# A seperate rule for original language
html:: html-$(XML_LANG)

###############################################################################
### BUILDING HTML SINGLE ###
###############################################################################

# Create html-LANG for all Translations
$(foreach L,$(TRANSLATIONS),$(eval $(call BUILD_Template,html-single,${L},nochunk-html.xsl)))

# Depend on html-LANG for all Translations
html-single-all:: $(foreach L,$(TRANSLATIONS),html-single-${L})

# A seperate rule for original language
html-single:: html-single-$(XML_LANG)

###############################################################################
### BUILDING HTML-HELP ###
###############################################################################

# Create html-LANG for all Translations
$(foreach L,$(TRANSLATIONS),$(eval $(call BUILD_Template,htmlhelp,${L},main-htmlhelp.xsl)))

# Depend on html-LANG for all Translations
htmlhelp-all:: $(foreach L,$(TRANSLATIONS),htmlhelp-${L})

# A seperate rule for original language
htmlhelp:: htmlhelp-$(XML_LANG)

###############################################################################
### BUILDING ECLIPSE ###
###############################################################################

# Create eclipse-LANG for all Translations
$(foreach L,$(TRANSLATIONS),$(eval $(call BUILD_Template,eclipse,${L},main-eclipse.xsl)))

# Depend on eclipse-LANG for all Translations
eclipse-all:: $(foreach L,$(TRANSLATIONS),eclipse-${L})

# A seperate rule for original language
eclipse:: eclipse-$(XML_LANG)

###############################################################################
### BUILDING PDF ###
###############################################################################

# Create pdf-LANG for all Translations
$(foreach L,$(TRANSLATIONS),$(eval $(call BUILD_Template,pdf,${L},main-pdf.xsl)))

# Depend on pdf-LANG for all Translations
pdf-all:: $(foreach L,$(TRANSLATIONS),pdf-${L})

# A seperate rule for original language
pdf:: pdf-$(XML_LANG)

###############################################################################
### BUILDING TXT ###
###############################################################################

# Create txt-LANG for all Translations
$(foreach L,$(TRANSLATIONS),$(eval $(call BUILD_Template,txt,${L},main-txt.xsl,html-single-${L})))

# Depend on txt-LANG for all Translations
txt-all:: $(foreach L,$(TRANSLATIONS),txt-${L})

# A seperate rule for original language
txt:: txt-$(XML_LANG)

###############################################################################
# SECTION: PO FILES 
###############################################################################

# Create update-po-LANG for all Translations
$(foreach L,$(OTHER_LANGS),$(eval $(call PO_Update_Template,${L},$(DOCNAME))))

# Depend on update-po-LANG for all Translations
update-po-all:: update-pot $(foreach L,$(OTHER_LANGS),update-po-${L})

# Ensure pot is up to date
update-pot::
	@echo "START: update-pot `date`"
	@if [ ! -d pot ]; then mkdir -p pot; fi
ifneq "$(EXTRA_DIRS)" ""
	@cd pot && mkdir -p $(EXTRA_DIRS)
endif
#	@cd $(XML_LANG) && for xml_file in `find . -name "*.xml"`; do \
		pot_file=`echo $$xml_file | sed -e 's/\.xml/\.pot/'`;\
		/usr/bin/xml2po -k -o ../pot/$$pot_file $$xml_file;\
	done;
#	$(MKPOT) --sub-dirs="$(EXTRA_DIRS_C)" $(XMLFILE)
	@cd $(XML_LANG) && for xml_file in `find . -name "*.xml" | sed -e 's/^\.\///g' | sort`; do \
		pot_file=`echo $$xml_file | sed -e 's/\.xml/\.pot/'`;\
		echo "	$$xml_file => $$pot_file";\
		xml2pot $$xml_file | msguniq  > ../pot/$$pot_file;\
	done;
	@echo "END: update-pot `date`"


# Create report-LANG for all Translations
$(foreach L,$(TRANSLATIONS),$(eval $(call PO_Report_Totals_Template,${L})))

report-totals:: $(foreach L,$(TRANSLATIONS), report-total-${L})

# Create report-LANG for all Translations
$(foreach L,$(TRANSLATIONS),$(eval $(call PO_Report_Template,${L})))

report-all:: $(foreach L,$(TRANSLATIONS), report-${L})
	@echo "START: report-all `date`"
	@echo "END: report-all `date`"

publish-report:: report-all
	@echo "START: publish-report `date`"
	@mkdir -p tmp/Reports
	@mkdir -p tmp/reports
	@if [ ! -d pot ]; then \
		echo "Invalid Report request, pot directory does not exist.";\
		exit 2; \
	fi;
	@if [ `find pot -name "*.pot" | wc -l` -le "0" ]; then \
		echo "Invalid Report request, no POT files exist."; \
		exit 2; \
	fi
	@cd pot && po2sgml --report *.pot >& ../tmp/reports/$(XML_LANG).txt
	@sed -i -e 's/\.pot/\.xml/g' tmp/reports/$(XML_LANG).txt
	@cd tmp/reports && StSe_Reports
# copy original common images, then copy translated images over the top
	@mkdir -p tmp/Reports/Common_Content
	@cp -rf $(COMMON_CONTENT)/common/$(XML_LANG)/css tmp/Reports/Common_Content/.
	-@cp -rf $(COMMON_CONTENT)/common/$(XML_LANG)/images  tmp/Reports/Common_Content/.
	@mkdir -p publish/Reports/$(PRODUCT)/$(VERSION)/${DOCNAME}
	@cp -rf tmp/Reports/* publish/Reports/$(PRODUCT)/$(VERSION)/$(DOCNAME)/.
	@echo "END: publish-report `date`"


###############################################################################
# Validate the translated xml
###############################################################################

$(foreach L,$(TRANSLATIONS),$(eval $(call TEST_Template,${L})))

test:: test-$(XML_LANG)

test-all:: $(foreach L,$(TRANSLATIONS), test-${L})

###############################################################################
# Validate the po files
###############################################################################

$(foreach L,$(TRANSLATIONS),$(eval $(call TEST_PO_Template,${L})))

test-po-all:: $(foreach L,$(TRANSLATIONS), test-${L})


###############################################################################
# The spec file handles all languages
###############################################################################

tar_dir:
	@echo "START: $@ `date`"
	@mkdir -p tmp/tar/$(BUILD_NAME)
ifneq "$(SPEC_XSL)" "$(COMMON_CONFIG)/xsl/spec2.xsl"
	@for lang in $(TRANSLATIONS); do cp -rf tmp/$$lang/html-single tmp/tar/$(BUILD_NAME)/$$lang;done
else
	@for lang in $(TRANSLATIONS); do cp -rf tmp/$$lang/xml tmp/tar/$(BUILD_NAME)/$$lang;done
endif
	@find tmp/tar/$(BUILD_NAME) -name CVS | xargs rm -rf
	@find tmp/tar/$(BUILD_NAME) -name '*.swp' | xargs rm -rf
	@find tmp/tar/$(BUILD_NAME) -name '*~' | xargs rm -rf
	@find tmp/tar/$(BUILD_NAME) -name '*.swo' | xargs rm -rf
	@find tmp/tar/$(BUILD_NAME) -name '*.bak' | xargs rm -rf
	@echo "END: $@ `date`"

# TODO
# Fix ghelp for O/S deployed books (xsl/spec2.xsl)
ifneq "$(SPEC_XSL)" "$(COMMON_CONFIG)/xsl/spec2.xsl"
spec: html-single-all tar_dir
else
spec: xml-all tar_dir
endif
	@echo "START: spec `date`"
	@rm -f tmp/subpackages.txt tmp/titles.txt tmp/changelog.txt tmp/extra_files*.txt
	@for lang in $(TRANSLATIONS); do \
		$(CATALOGS) $(XSLTPROC) --nonet --stringparam book-lang $$lang $(COMMON_CONFIG)/xsl/subtitle.xsl tmp/$$lang/xml/$(DOC_TYPE)_Info.xml >> tmp/titles.txt; \
		find tmp/tar/$(BUILD_NAME)/$$lang -maxdepth 1 -type d | grep -P "$$lang\/\S" | sed -e "s/tmp\/tar\/$(BUILD_NAME)\/$$lang\///g" | sed -e "s/^/%doc $$lang\//g" >> tmp/extra_files-$$lang.txt; \
 	done;
	@for lang in $(OTHER_LANGS); do \
		$(CATALOGS) $(XSLTPROC) --nonet --stringparam book-title "$(SPEC_NAME)" \
		--stringparam book-lang en-US \
		--stringparam extra-files "$$(<tmp/extra_files-$$lang.txt)" \
		--stringparam trans-lang $$lang\
		$(SUB_SPEC_XSL) tmp/$$lang/xml/$(DOC_TYPE)_Info.xml >> tmp/subpackages.txt; \
	done;
	@rev_file=`grep -l revhistory $(XML_LANG)/* | sed -e 's/$(XML_LANG)\///g'`; \
		$(CATALOGS) $(XSLTPROC) --nonet $(COMMON_CONFIG)/xsl/changelog.xsl tmp/$(XML_LANG)/xml/$$rev_file > tmp/changelog.txt
	@$(CATALOGS) $(XSLTPROC) --nonet --path "$(PWD)" --stringparam book-title "$(SPEC_NAME)" \
	--stringparam main-file "$(DOCNAME).xml" \
	--stringparam book-lang "$(XML_LANG)" \
	--stringparam titles "$$(<tmp/titles.txt)" \
	--stringparam book-log "$$(<tmp/changelog.txt)" \
	--stringparam extra-files "$$(<tmp/extra_files-$(XML_LANG).txt)" \
	-o tmp/$(SPEC_NAME).spec \
	$(SPEC_XSL) tmp/$(XML_LANG)/xml/$(DOC_TYPE)_Info.xml
	@perl -p -i -e '$$foo = `cat tmp/subpackages.txt`; s/\@\@\@SUBPACKAGES\@\@\@/$$foo/g' tmp/$(SPEC_NAME).spec
ifeq "$(SPEC_XSL)" "$(COMMON_CONFIG)/xsl/spec2.xsl"
	@mkdir -p tmp/tar/$(BUILD_NAME)/omf
	@for lang in $(TRANSLATIONS); do \
		$(CATALOGS) $(XSLTPROC) --nonet --path "$(PWD)" --stringparam book-title "$(PRODUCT)-$(DOCNAME)-$(VERSION)" \
		--stringparam lang "$$lang" \
		--stringparam  prod "$(PRODUCT)" \
		--stringparam  docname "$(DOCNAME)" \
		--stringparam category "$(CATEGORY)" \
		-o tmp/tar/$(BUILD_NAME)/omf/$(PRODUCT)-$(DOCNAME)-$$lang.omf \
		$(COMMON_CONFIG)/xsl/omf.xsl tmp/$$lang/xml/$(DOC_TYPE)_Info.xml; \
	done
	@cp tmp/tar/$(BUILD_NAME)/omf/$(PRODUCT)-$(DOCNAME)-$(XML_LANG).omf tmp/tar/$(BUILD_NAME)/omf/$(PRODUCT)-$(DOCNAME)-C.omf
endif
	@echo "END: spec `date`"


###############################################################################
# The tar file contains all languages and the spec file
###############################################################################

tar:: spec
	@echo "START: tar `date`"
#	@cp -f tmp/$(SPEC_NAME).spec tmp/tar/$(TAR_NAME)/.
	@cd tmp/tar && tar -cf $(TAR_NAME).tar $(BUILD_NAME)
	@cd tmp/tar && gzip -9 $(TAR_NAME).tar
	@cd tmp/tar && mv $(TAR_NAME).tar.gz $(TAR_NAME).tgz
	@echo "The archive is in tmp/tar/$(TAR_NAME).tgz"
	@echo "END: tar `date`"

srpm:: tar
	@echo "START: srpm `date`"
	@mkdir -p tmp/rpm/SPECS tmp/rpm/SOURCES tmp/rpm/SRPMS
#	@rpmbuild --define "_topdir $(PWD)/tmp/rpm" -ts tmp/tar/$(TAR_NAME).tgz
	@cp tmp/tar/$(TAR_NAME).tgz tmp/rpm/SOURCES/.
	@rpmbuild --define "_topdir $(PWD)/tmp/rpm" -bs tmp/$(SPEC_NAME).spec
	@echo "END: srpm `date`"

# Brew the srpm
brew:: srpm
	@brew build --nowait $(BREW_DIST) tmp/rpm/SRPMS/$(TAR_NAME).src.rpm

# Report on latest builds in brew
brew_report::
	@brew latest-pkg $(BREW_DIST) $(DOCNAME)


###############################################################################
###############################################################################

TAR_FORMATS = html htmlhelp html-single pdf txt eclipse
$(foreach FORMAT,$(TAR_FORMATS),$(eval $(call TAR_Template,${FORMAT})))

tar-all:: $(foreach FORMAT,$(TAR_FORMATS),tar-${FORMAT})

$(foreach FORMAT,$(TAR_FORMATS),$(eval $(call SPEC_Template,${FORMAT})))

spec-all:: $(foreach FORMAT,$(TAR_FORMATS),spec-${FORMAT})

$(foreach FORMAT,$(TAR_FORMATS),$(eval $(call SRPM_Template,${FORMAT})))

srpm-all:: $(foreach FORMAT,$(TAR_FORMATS),srpm-${FORMAT})

###############################################################################
# Web SRPMs
###############################################################################

$(foreach L,$(TRANSLATIONS),$(eval $(call Trans_Info_Template,${L})))
$(foreach L,$(TRANSLATIONS),$(eval $(call WEB_SRPM_Template,${L})))
$(foreach L,$(TRANSLATIONS),$(eval $(call Publish-WEB_Template,${L})))

web-srpm-all:: $(foreach L,$(TRANSLATIONS), web-srpm-${L})

###############################################################################
###############################################################################

svn_add_po:
	@echo "START: $@ `date`"
	@for lang in $(OTHER_LANGS); do echo "adding $$lang"; svn add $$lang;done;
	@echo "END: $@ `date`"

checkin_po_files:
	@echo "START: $@ `date`"
	@for lang in $(OTHER_LANGS); do cvs ci -m"updating po files" $$lang;done; cvs ci -m"updating po files" pot
	@echo "END: $@ `date`"

update_includes:
ifdef DEFAULT_LANGS
	@for file in `find $(XML_LANG)/*.xml | sort`; do $(XMLCLEAN) -u -in $$file -out $$file -lang $(XML_LANG) --trans $(OTHER_LANGS_C) --defaults $(DEFAULT_LANGS) ;done
else
	@for file in `find $(XML_LANG)/*.xml | sort`; do $(XMLCLEAN) -u -in $$file -out $$file -lang $(XML_LANG) --trans $(OTHER_LANGS_C);done
endif

###############################################################################
###############################################################################

publish-dist: html-single-all
	@echo "START: $@ `date`"
	@for lang in $(TRANSLATIONS); do \
		mkdir -p publish/$$lang; \
		cp -rf	tmp/$$lang/html-single/* publish/$$lang/.; \
	done
	@echo "END: $@ `date`"

dist-spec: xml-all
	@echo "START: $@ `date`"
	@for lang in $(TRANSLATIONS); do \
		$(CATALOGS) $(XSLTPROC) --nonet --stringparam book-lang $$lang $(COMMON_CONFIG)/xsl/subtitle.xsl tmp/$$lang/xml/$(DOC_TYPE)_Info.xml >> tmp/titles.txt; \
 	done;
	@for lang in $(OTHER_LANGS); do \
		$(CATALOGS) $(XSLTPROC) --nonet --stringparam book-title "$(SPEC_NAME)" \
		--stringparam book-lang $(XML_LANG) \
		--stringparam trans-lang $$lang\
		$(SUB_SPEC_XSL) tmp/$$lang/xml/$(DOC_TYPE)_Info.xml >> tmp/subpackages.txt; \
	done;
	@rev_file=`grep -l revhistory $(XML_LANG)/* | sed -e 's/$(XML_LANG)\///g'`; \
		$(CATALOGS) $(XSLTPROC) --nonet $(COMMON_CONFIG)/xsl/changelog.xsl tmp/$(XML_LANG)/xml/$$rev_file > tmp/changelog.txt
	@$(CATALOGS) $(XSLTPROC) --nonet --path "$(PWD)" --stringparam book-title "$(SPEC_NAME)" \
	--stringparam main-file "$(DOCNAME).xml" \
	--stringparam book-lang "$(XML_LANG)" \
	--stringparam titles "$$(<tmp/titles.txt)" \
	--stringparam book-log "$$(<tmp/changelog.txt)" \
	-o $(SPEC_NAME).spec \
	$(SPEC_XSL) tmp/$(XML_LANG)/xml/$(DOC_TYPE)_Info.xml
	@perl -p -i -e '$$foo = `cat tmp/subpackages.txt`; s/\@\@\@SUBPACKAGES\@\@\@/$$foo/g' $(SPEC_NAME).spec
	@echo "END: $@ `date`"

dist: clean dist-spec
	@echo "START: $@ `date`"
	@mkdir -p publish/$(BUILD_NAME)
	@cp -rft publish/$(BUILD_NAME) Makefile $(TRANSLATIONS) $(SPEC_NAME).spec
	@if [ -d pot ]; then cp -rft publish/$(BUILD_NAME) pot; fi
	@chmod 0664 publish/$(BUILD_NAME)/$(SPEC_NAME).spec
	@pushd publish > /dev/null; \
		tar -cz --exclude-from=$(COMMON_CONFIG)/make/tar-excludes -f $(TAR_NAME).tgz $(BUILD_NAME); \
	popd > /dev/null
	@rm -rf publish/$(BUILD_NAME)
	@echo "The archive is in publish/$(TAR_NAME).tgz"
	@echo "END: $@ `date`"

dist-srpm: dist
	@echo "START: $@ `date`"
	@mkdir -p tmp/rpm/SPECS tmp/rpm/SOURCES tmp/rpm/SRPMS
	@cp publish/$(TAR_NAME).tgz tmp/rpm/SOURCES/.
	@rpmbuild --define "_topdir $(PWD)/tmp/rpm" -bs $(SPEC_NAME).spec
	@echo "END: $@ `date`"


###############################################################################

###############################################################################

help_params::
	@echo
	@echo "Following is a list of the parameters that can be set in the $(DOC_TYPE)s Makefile"
	@echo
	@echo "DOC_TYPE: defaults to Book, can also be Article or Set"
	@echo
	@echo "XML_LANG: source language of xml, mostly en-US"
	@echo
	@echo "DOCNAME: Name of main Book file. Also used as publishing directory."
	@echo
	@echo "OTHER_LANGS: space seperated list of language locales"
	@echo
	@echo "CONFIDENTIAL: is this book confidential? defaults to 0"
	@echo
	@echo "PRODUCT: Product this book is associated with. Currently: $(PRODUCT)"
	@echo "	When this book is published it will be nested in a directory named after the product"
	@echo
	@echo "BRAND: Brand to style output with. Currently $(BRAND)"
	@echo
	@echo "BREW_DIST: brew tag, currently $(BREW_DIST)"
	@echo
	@echo "TOC_SECTION_DEPTH: How many levels of sections should be included in TOC? Defaults to 2"
	@echo
	@echo "CHUNK_SECTION_DEPTH: Override the max section depth to chunk to. Currently: $(CHUNK_SECTION_DEPTH)"
	@echo
	@echo "CHUNK_FIRST: Controls chunking of first sections, defaults to 1. Currently: $(CHUNK_FIRST)"
	@echo
	@echo "XSLTPROC: Tool for converting xml. Currently: $(XSLTPROC)"
	@echo
	@echo "BOOKS: For Sets this defines the Books it contains"
	@echo
	@echo "DEFAULT_LANGS: Languages that should be included in xi:include even if the translation isn't 100%%."
	@echo "	Used in update_includes."
	@echo
	@echo "IGNORED_TRANSLATIONS: When building replace any languages in this list with the source langauge text"
	@echo "	This allows you to work on translations without shipping incomplete translations."
	@echo
	@echo "SHOW_REMARKS: 0 or 1. Display contents of remark tags in output? Currently $(SHOW_REMARKS)"
	@echo

help::
	@echo "List of Common make targets."
	@echo
	@echo "dist: Create a tar for desktop package creation."
	@echo
	@echo "brew::"
	@echo "	Build the SRPM then push it to Brew, current tag is: $(BREW_DIST)"
	@echo
	@echo "brew_report::"
	@echo "	Report on the latest packages in Brew, current tag is: $(BREW_DIST)"
	@echo
	@echo "checkin_po_files:"
	@echo "	Check in all PO files with the message 'updating PO files'"
	@echo "	Intended for use in automated updating of PO files."
	@echo
	@echo "clean::"
	@echo "	Remove temporary files"
	@echo
	@echo "clean_ids:: DANGER This changes your source XML"
	@echo "	Modify tag ID's to standard format."
	@echo
	@echo "clean_set_books::"
	@echo "	For Sets of Books, this will run 'make clean' for all the Books."
	@echo
	@echo "help::"
	@echo "	Display this help message."
	@echo
	@echo "help_params::"
	@echo "	Display information about the parameters that can be set in the Books Makefile."
	@echo
	@echo "pre::"
	@echo "	Special target to allow scripts to be run before any other targets are built."
	@echo
	@echo "publish-crazy::"
	@echo "	Special test target to run publish targets for all languages and formats"
	@echo
	@echo "publish-report::"
	@echo "	Run report-all then copy the output to the publish directory."
	@echo
	@echo "report-<LANG>-<LOC>::"
	@echo "	Generate the translation status for <LANG>-<LOC>."
	@echo
	@echo "report-all::"
	@echo "	Run report-<LANG>-<LOC> for all languages."
	@echo
	@echo "report-total-<LANG>-<LOC>::"
	@echo "	Display the translation status."
	@echo
	@echo "report-totals::"
	@echo "	Run report-total-<LANG>-<LOC> for all languages."
	@echo
	@echo "set_books::"
	@echo "	For Sets of Books this will run 'make xml-all' for all the Books in that Set."
	@echo
	@echo "tar::"
	@echo "	Generate the tar file for the XML RPM."
	@echo
	@echo "spec::"
	@echo "	Generate the RPM Spec file for the XML RPM."
	@echo
	@echo "srpm::"
	@echo "	Generate the source RPM for the XML RPM."
	@echo
	@echo "tar-<FORMAT>::"
	@echo "	Generate the tar file for the supplied Format."
	@echo
	@echo "tar-all::"
	@echo "	Run tar-<FORMAT> for all formats."
	@echo
	@echo "	Current formats are: $(TAR_FORMATS)"
	@echo
	@echo "spec-<FORMAT>::"
	@echo "	Generate an RPM Spec file to contain the supplied Format."
	@echo
	@echo "spec-all::"
	@echo "	Run spec-<FORMAT> for all formats."
	@echo
	@echo "	Current formats are: $(TAR_FORMATS)"
	@echo
	@echo "srpm-<FORMAT>::"
	@echo "	Generate an source RPM supplied Format."
	@echo
	@echo "srpm-all::"
	@echo "	Run srpm-<FORMAT> for all formats."
	@echo
	@echo "	Current formats are: $(TAR_FORMATS)"
	@echo
	@echo "test::"
	@echo "	Shortcut to test-$(XML_LANG)"
	@echo
	@echo "test-<LANG>-<LOC>::"
	@echo "	Validate the XML for the supplied language."
	@echo
	@echo "test-all::"
	@echo "	Run test-<LANG>-<LOC> for all languages."
	@echo
	@echo "update_includes: DANGER This updates your source XML"
	@echo "	DANGER EXPERMINENTAL This could cause you a lot of heart ache and extra work."
	@echo "	Modify all xi:include tags to exclude langauges that are not 100%% translated."
	@echo
	@echo "update-po-<LANG>-<LOC>::"
	@echo "	Update the PO files for the supplied language."
	@echo
	@echo "update-po-all::"
	@echo "	Run update-po-<LANG>-<LOC> for all languages."
	@echo
	@echo "update-pot::"
	@echo "	Update the POT files."
	@echo
	@echo "xml-<LANG>-<LOC>::"
	@echo "	Generate & validate the XML for the supplied language."
	@echo
	@echo "xml-all::"
	@echo "	Run xml-<LANG>-<LOC> for all languages."
	@echo
	@for format in $(TAR_FORMATS); do \
		echo "$$format::"; \
		echo "	Short cut to $$format-$(XML_LANG)";\
		echo;\
		echo "$$format-<LANG>-<LOC>::";\
		echo "	Generate $$format output for <LANG>-<LOC>";\
		echo;\
		echo "$$format-all::";\
		echo "	Run $$format-<LANG>-<LOC> for all languages.";\
		echo;\
		echo "publish-$$format::"; \
		echo "	Short cut to publish-$$format-$(XML_LANG)";\
		echo;\
		echo "publish-$$format-<LANG>-<LOC>::";\
		echo "	Run $$format-<LANG>-<LOC> and then copy output to the publish directory";\
		echo;\
		echo "publish-$$format-all::";\
		echo "	Run publish-$$format-<LANG>-<LOC> for all languages.";\
		echo;\
	done;
	@echo "svn_add_po: Run svn add for all translations."
	@echo

