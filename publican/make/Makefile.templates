#Makefile for Red Hat Documentation
#Created by Jeff Fearn <jfearn@redhat.com>
#    Copyright (C) 2008 Red Hat, Inc.
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of theElement GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

# Default values, only set if not set in book Makefile
# default 2 section levels in TOC
TOC_SECTION_DEPTH		?= 2
GENERATE_SECTION_TOC_LEVEL	?= 0
CHUNK_SECTION_DEPTH		?= 4
XMLPOMERGE	= poxmerge
CHUNK_FIRST	?= 0
SHOW_REMARKS	?= 0
EMBEDTOC	?= 0
BRAND		?= common
DOC_URL		?= https://fedorahosted.org/publican
DESKTOP		?= 0
XMLCLEAN	?= xmlClean -strict $(STRICT)
LC_BRAND	= $(shell echo "$(BRAND)" | tr "[:upper:]" "[:lower:]" )
XALAN		= java -cp "/usr/share/java/xalan-j2.jar:/usr/share/java/xerces-j2.jar:/usr/share/java/xml-commons-resolver.jar:/usr/share/publican/xsl:/usr/share/publican/xsl/docbook/1.72.0/extensions/xalan27/dist/xalan27.jar" -Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration org.apache.xalan.xslt.Process -entityresolver org.apache.xml.resolver.tools.CatalogResolver -uriresolver org.apache.xml.resolver.tools.CatalogResolver
TEST_XALAN	= 1

# List of tags to exclude from aspell check
ASPELL_EXCLUDES = programlisting,userinput,screen,filename,command,computeroutput,abbrev,accel,orgname

# This gets overridden in the spec file for systems that don't
# ship DocBook 4.5 DTD
#CATALOGS_OVERRIDE

###############################################################################
# ALL_Template
#  Create rules to handle all languages for a given format and a shortcut rule
#  for the default langauge.
#
#  Creates rules like:
#    html-all:: html-en-US htnl-ja-JP ...
#
#    html:: html-en-US
###############################################################################
define	ALL_Template
.PHONY:	${1}-all
${1}-all:: $(foreach L,$(TRANSLATIONS), ${1}-${L})
endef

###############################################################################
# SECTION: PUBLISHING 
###############################################################################

###############################################################################
# PUBLISH_template
# produces phony rules like:
#		publish-html-ko-KR: html-ko-KR
#		publish-pdf-ja-JP: pdf-ja-JP
# Handles having different public/local names for i18n
# Params:
#	1: Format (pdf/html etc)
#	2: Language (ko-KR, bn-IN etc)
###############################################################################

define	PUBLISH_template
.PHONY:	publish-${1}-${2}
publish-${1}-${2}:: ${1}-${2}
	@echo "START: publish-${1}-${2} `date`"
	@mkdir -p publish/${2}/$(PRODUCT)/$(VERSION)/${1}/$(DOCNAME)
	@cp -rf tmp/${2}/${1}/* publish/${2}/$(PRODUCT)/$(VERSION)/${1}/$(DOCNAME)/. 
	@echo "END: publish-${1}-${2} `date`"
endef

###############################################################################
# SECTION: BUILDING 
###############################################################################

###############################################################################
#
# Template to create full xml for each language.
# Parameters:
#	1: Language (ko-KR, bn-IN etc)
#	2: Doc Name
#
###############################################################################
define	XML_Template
.PHONY:	xml-${1}
xml-${1}:: pre
ifeq "${1}" "$(findstring ${1},$(IGNORED_TRANSLATIONS))"
xml-${1}:: xml-$(XML_LANG)
endif
	@echo "START: xml-${1} `date`"
	-@mkdir -p tmp/${1}/xml_tmp
	-@mkdir -p tmp/${1}/xml/Common_Content
ifdef EXTRA_DIRS
ifneq "$(EXTRA_DIRS)" ""
	-@cd tmp/${1}/xml && mkdir -p $(EXTRA_DIRS)
	-@cd tmp/${1}/xml_tmp && mkdir -p $(EXTRA_DIRS)
endif
endif
ifeq "${1}" "$(findstring ${1},$(IGNORED_TRANSLATIONS))"
	@echo "	Bypassing translation for ${1}"
	@cp -rf tmp/$(XML_LANG)/* tmp/${1}/.
else
ifeq "${1}" "$(XML_LANG)"
	@cp -rf ${1}/* tmp/${1}/xml_tmp
else
	@if [ ! -d ${1} ]; then \
		echo "Invalid Build request, language directory ${1} does not exist."; \
		exit 0; \
	fi
	@if [ `find ${1} -name "*.po" | wc -l` -le "0" ]; then \
		echo "Invalid Build request, no PO files exist for language ${1}."; \
		exit 0; \
	fi
#	@cd $(XML_LANG) && for xml_file in `find . -name "*.xml" | sort`; do \
		po_file=`echo $$$$xml_file | sed -e 's/\.xml/\.po/'`;\
		/usr/bin/xml2po -e -l ${1} -p ../${1}/$$$$po_file -o ../tmp/${1}/xml_tmp/$$$$xml_file $$$$xml_file;\
	done;
	@$(XMLPOMERGE) --langs=${1} --output=tmp/${1}/xml_tmp --sub-dirs="$(EXTRA_DIRS_C)" --lang-dir=${1} $(XML_LANG)/${2}.xml
endif
# copy common files
	@if [ -d $(COMMON_CONTENT)/$(BRAND)/en-US ]; then \
		echo "	copying $(BRAND)/en-US  Common_Content"; \
		cp -rf $(COMMON_CONTENT)/$(BRAND)/en-US/* tmp/${1}/xml/Common_Content/.; \
	fi
	@if [ "$(XML_LANG)" != "en-US" ] && [ -d $(COMMON_CONTENT)/$(BRAND)/$(XML_LANG) ]; then \
		echo "	copying $(BRAND)/$(XML_LANG) Common_Content"; \
		cp -rf $(COMMON_CONTENT)/$(BRAND)/$(XML_LANG)/* tmp/${1}/xml/Common_Content/.; \
	fi
	@if [ "${1}" != "$(XML_LANG)" ] && [ -d $(COMMON_CONTENT)/$(BRAND)/${1} ]; then \
		echo "	copying $(BRAND)/${1} Common_Content"; \
		cp -rf $(COMMON_CONTENT)/$(BRAND)/${1}/* tmp/${1}/xml/Common_Content/.; \
	fi
# copy original local ent, then copy translated local ent over the top
	@if [ -f $(XML_LANG)/${2}.ent ]; then \
		cp -rf $(XML_LANG)/${2}.ent tmp/${1}/xml/.; \
		sed -i -e 's/docbookx.dtd" \[/docbookx.dtd" \[\n<!ENTITY % BOOK_ENTITIES SYSTEM "..\/${2}.ent">\n%BOOK_ENTITIES\;/' tmp/${1}/xml/Common_Content/*.xml; \
	fi
	@if [ -f ${1}/${2}.ent ]; then cp -rf ${1}/${2}.ent tmp/${1}/xml/.; fi
# copy original images, then copy translated images over the top
	@if [ -d $(XML_LANG)/images ]; then cp -rf $(XML_LANG)/images tmp/${1}/xml/.; fi
	@if [ -d ${1}/images ]; then cp -rf ${1}/images tmp/${1}/xml/.; fi
# copy extras
	@if [ -d $(XML_LANG)/extras ]; then cp -rf $(XML_LANG)/extras tmp/${1}/xml/.; fi
	@if [ -d ${1}/extras ]; then cp -rf ${1}/extras tmp/${1}/xml/.; fi
	@if [ 1 ]; then \
		if [ "$(ARCH)" != "" ]; then \
			args=`echo "-arch $(ARCH)"`; \
		fi; \
		if [ "$(CONDITION)" != "" ]; then \
			args=`echo "$$$$args -condition $(CONDITION)"`; \
		fi; \
		if [ "$(DTD_VER)" != "" ]; then \
			args=`echo "$$$$args -dtd $(DTD_VER)"`; \
		fi; \
		pushd tmp/${1}/xml_tmp > /dev/null; \
			echo "cleaning files"; \
			for file in `find . -name "*.xml" | sort`; do \
				file=`echo $$$$file | sed -e 's/^\.\///'`; \
				echo "	$$$$file"; \
				$(XMLCLEAN) -U -in $$$$file -out ../xml/$$$$file -book ${2} -lang ${1} $$$$args || exit 4; \
			done; \
		popd > /dev/null; \
	fi;
	@find tmp -name CVS | xargs rm -rf
	@find tmp -name '.svn' | xargs rm -rf
	@cd tmp/${1}/xml && rmImages
endif
	@echo "END: xml-${1} `date`"
endef

###############################################################################
#
# Template to allow translations to be HTML/PDF-afied
# produces phony rules like: html-ko-KR, pdf-ja-JP etc.
# Parameters:
#	1: Format (pdf/html etc)
#	2: Language (ko-KR, bn-IN etc)
#	3: XSL file
#	4: Extra Deps
#
# TODO FIXME: Need a cleaner way of handling ignored translations.
###############################################################################
define	BUILD_Template
.PHONY:	${1}-${2}
ifeq "${2}" "$(findstring ${2},$(IGNORED_TRANSLATIONS))"
${1}-${2}:: GENLANG = $(XML_LANG)
else
${1}-${2}:: GENLANG = ${2}
endif
${1}-${2}:: xml-${2} test-${2} ${4}
	@echo "START: ${1}-${2} `date`"
	@mkdir -p tmp/${2}/${1}
ifeq "${2}" "$(findstring ${2},$(IGNORED_TRANSLATIONS))"
	@echo "	Bypassing translation for ${2}"
	@cp -rf tmp/$(XML_LANG)/${1} tmp/${2}/.
else
ifeq "${1}" "txt"
	@cd tmp/${2} && /usr/bin/links -dump -dump-width 72 -force-html -dump-charset UTF8 -no-numbering html-single/index.html > txt/$(DOCNAME).txt
else
ifeq "${1}" "pdf"
	@cd tmp/${2}/xml; \
		if [ -f $(COMMON_CONFIG)/xsl/$(BRAND)/${3} ]; then \
			xsl_file="$(COMMON_CONFIG)/xsl/$(BRAND)/${3}"; \
		else \
			xsl_file="$(COMMON_CONFIG)/xsl/${3}"; \
		fi; \
		fop_ver=`fop -v 2>/dev/null | grep FOP | sed -e 's/^[^0..9]*//g'`; \
		if [ "$(TEST_XALAN)" == "1" ]; then \
			echo "$(XALAN) -out $(DOCNAME).fo -xsl $$$$xsl_file -in $(DOCNAME).xml -param toc.section.depth $(TOC_SECTION_DEPTH) -param chunk.section.depth $(CHUNK_SECTION_DEPTH) -param confidential ${CONFIDENTIAL} -param l10n.gentext.language $$(GENLANG) -param show.comments $(SHOW_REMARKS) -param use.extensions 1 -param tablecolumns.extensions 1 -param generate.section.toc.level $(GENERATE_SECTION_TOC_LEVEL)"; \
			$(XALAN) -out $(DOCNAME).fo -xsl $$$$xsl_file -in $(DOCNAME).xml -param toc.section.depth "$(TOC_SECTION_DEPTH)" -param chunk.section.depth "$(CHUNK_SECTION_DEPTH)" -param confidential ${CONFIDENTIAL} -param l10n.gentext.language "$$(GENLANG)" -param show.comments $(SHOW_REMARKS) -param use.extensions 1 -param tablecolumns.extensions 1 -param generate.section.toc.level $(GENERATE_SECTION_TOC_LEVEL); \
		else \
		if [ "$$$$fop_ver" = "0.20.5" ]; then \
			$(CATALOGS) xsltproc  --stringparam toc.section.depth "$(TOC_SECTION_DEPTH)" --stringparam chunk.section.depth "$(CHUNK_SECTION_DEPTH)" --stringparam confidential ${CONFIDENTIAL} --stringparam l10n.gentext.language "$$(GENLANG)" --stringparam show.comments $(SHOW_REMARKS) --stringparam generate.section.toc.level $(GENERATE_SECTION_TOC_LEVEL) --xinclude -o $(DOCNAME).fo $$$$xsl_file $(DOCNAME).xml; \
		else \
			$(CATALOGS) xsltproc  --stringparam toc.section.depth "$(TOC_SECTION_DEPTH)" --stringparam chunk.section.depth "$(CHUNK_SECTION_DEPTH)" --stringparam confidential ${CONFIDENTIAL} --stringparam l10n.gentext.language "$$(GENLANG)" --stringparam show.comments $(SHOW_REMARKS) --stringparam fop.extensions "0" --stringparam fop1.extensions "1" --stringparam admon.graphics.extension ".png" --stringparam generate.section.toc.level $(GENERATE_SECTION_TOC_LEVEL) --xinclude -o $(DOCNAME).fo $$$$xsl_file $(DOCNAME).xml ;\
		fi; \
		fi; \
		if [ ! -f $(COMMON_CONFIG)/fop/fop-$$$$fop_ver.xconf ]; then \
			echo "WARNING: config file for FOP version '$$$$fop_ver' not found! Attempting to use default config file."; \
			fop_file=fop.xconf; \
		else \
			fop_file=fop-$$$$fop_ver.xconf; \
		fi; \
		echo "fop -q -c $(COMMON_CONFIG)/fop/$$$$fop_file -fo $(DOCNAME).fo -pdf $(DOCNAME).pdf"; \
		fop -q -c $(COMMON_CONFIG)/fop/$$$$fop_file -fo $(DOCNAME).fo -pdf $(DOCNAME).pdf;
	@mv -f tmp/${2}/xml/$(DOCNAME).${1} tmp/${2}/${1}/.
else
ifeq "${1}" "html-single"
	@cd tmp/${2}/${1}; \
		if [ -f $(COMMON_CONFIG)/xsl/$(BRAND)/${3} ]; then xsl_file="$(COMMON_CONFIG)/xsl/$(BRAND)/${3}"; else xsl_file="$(COMMON_CONFIG)/xsl/${3}";fi; \
		$(CATALOGS) xsltproc  --stringparam toc.section.depth "$(TOC_SECTION_DEPTH)" --stringparam chunk.section.depth "$(CHUNK_SECTION_DEPTH)" --stringparam confidential "${CONFIDENTIAL}" --stringparam profile.lang "$$(GENLANG)" --stringparam l10n.gentext.language "$$(GENLANG)" --stringparam embedtoc $$(EMBEDTOC) --stringparam desktop $$(DESKTOP)  --stringparam show.comments $(SHOW_REMARKS) --stringparam generate.section.toc.level $(GENERATE_SECTION_TOC_LEVEL) --xinclude  -o index.html $$$$xsl_file ../xml/$(DOCNAME).xml
# Copy original images to output dir, then copy any translated images over the top
	-@cp -rf tmp/${2}/xml/images  tmp/${2}/${1}/.
	-@cp -rf tmp/${2}/xml/Common_Content  tmp/${2}/${1}/.
# copy files
	@if [ -d $(XML_LANG)/files ]; then cp -rf $(XML_LANG)/files tmp/${2}/${1}/.; fi
	@if [ -d ${1}/files ]; then cp -rf ${1}/files tmp/${2}${1}/.; fi
	@find tmp/${2}/${1}/Common_Content -name '*.xml' | xargs rm -rf
else
	@cd tmp/${2}/${1}; \
		if [ -f $(COMMON_CONFIG)/xsl/$(BRAND)/${3} ]; then xsl_file="$(COMMON_CONFIG)/xsl/$(BRAND)/${3}"; else xsl_file="$(COMMON_CONFIG)/xsl/${3}";fi; \
		$(CATALOGS) xsltproc  --stringparam doc.url "$(DOC_URL)" --stringparam toc.section.depth "$(TOC_SECTION_DEPTH)" --stringparam chunk.section.depth "$(CHUNK_SECTION_DEPTH)" --stringparam confidential "${CONFIDENTIAL}" --stringparam profile.lang "$$(GENLANG)" --stringparam l10n.gentext.language "$$(GENLANG)" --stringparam show.comments $(SHOW_REMARKS) --stringparam embedtoc $$(EMBEDTOC) --stringparam desktop $$(DESKTOP) --stringparam chunk.first.sections "$(CHUNK_FIRST)" --stringparam generate.section.toc.level $(GENERATE_SECTION_TOC_LEVEL) --xinclude $$$$xsl_file ../xml/$(DOCNAME).xml
# Copy original images to output dir, then copy any translated images over the top
	-@cp -rf tmp/${2}/xml/images  tmp/${2}/${1}/.
	-@cp -rf tmp/${2}/xml/Common_Content  tmp/${2}/${1}/.
# copy files
	@if [ -d $(XML_LANG)/files ]; then cp -rf $(XML_LANG)/files tmp/${2}/${1}/.; fi
	@if [ -d ${1}/files ]; then cp -rf ${1}/files tmp/${2}${1}/.; fi
	@find tmp/${2}/${1}/Common_Content -name '*.xml' | xargs rm -rf
endif
endif
endif
	@find tmp -name CVS | xargs rm -rf
	@find tmp -name '.svn' | xargs rm -rf
endif
	@echo "END: ${1}-${2} `date`"
endef


###############################################################################
# SECTION: PO FILES 
###############################################################################

###############################################################################
# Template to update PO files
# produces phony rules like: update-po-ko-KR, update-po-ja-JP etc.
# Parameters:
#	1: Language (ko-KR, bn-IN etc)
#	2: Doc Name
###############################################################################
define	PO_Update_Template
.PHONY:	update-po-${1}
update-po-${1}:: update-pot
	@echo "START: update-po-${1} `date`"
	@if [ ! -d ${1} ]; then mkdir -p ${1}; fi
ifneq "$(EXTRA_DIRS)" ""
	@cd ${1} && mkdir -p $(EXTRA_DIRS)
endif
	@cd pot && for pot_file in `find . -name "*.pot" | sed -e 's/^\.\///' | sort`; do \
		po_file=`echo $$$$pot_file | sed -e 's/\.pot/\.po/'`; \
		if [ ! -f ../${1}/$$$$po_file ]; then \
			echo "Creating new po file: ../${1}/$$$$po_file"; \
			msginit -l ${1} --no-translator -i $$$$pot_file -o ../${1}/$$$$po_file; \
			sed -i -e 's/PACKAGE/$(DOCNAME)/g' ../${1}/$$$$po_file; \
			sed -i -e 's/VERSION/$(VERSION)/g' ../${1}/$$$$po_file; \
		else \
			echo "Merging existing po file: ../${1}/$$$$po_file"; \
			echo -n "	Before:	";\
			msgfmt -c -f --statistics ../${1}/$$$$po_file;\
			msgmerge --quiet --backup=none --update ../${1}/$$$$po_file $$$$pot_file; \
		fi; \
		echo -n "	After:	" ;\
		msgfmt -c -f --statistics ../${1}/$$$$po_file;\
		xml_file=`echo $$$$pot_file | sed -e 's/\.pot/\.xml/'`; \
		if [ ! -f ../$(XML_LANG)/$$$$xml_file ]; then \
			echo "WARNING: No source xml file exists for $$$$pot_file"; \
		fi; \
	done;
	@echo "END: update-po-${1} `date`"
endef

###############################################################################
# Template for Translation Totals Reports: Prints to command line
#
# produces phony rules like: report-total-ko-KR, report-total-ja-JP etc.
# Parameters:
#	1: Language (ko-KR, bn-IN etc)
###############################################################################

define	PO_Report_Totals_Template
.PHONY:	report-total-${1}
report-total-${1}::
ifneq "${1}" "$(XML_LANG)"
	@echo "START: report-total-${1} `date`"
	@if [ ! -d ${1} ]; then \
		echo "Invalid Report request, language directory ${1} does not exist."; \
		exit 0; \
	fi
	@if [ `find ${1} -name "*.po" | wc -l` -le "0" ]; then \
		echo "Invalid Report request, no PO files exist for language ${1}."; \
		exit 0; \
	fi
	@po2sgml --total --report ${1}/*.po
	@echo "END: report-total-${1} `date`"
endif
endef

###############################################################################
# Template for Translation Reports: redirects to file
#
# produces phony rules like: report-ko-KR, report-ja-JP etc.
# Parameters:
#	1: Language (ko-KR, bn-IN etc)
###############################################################################

define	PO_Report_Template
.PHONY:	report-${1}
report-${1}::
ifneq "${1}" "$(XML_LANG)"
	@echo "START: report-${1} `date`"
	@if [ ! -d ${1} ]; then \
		echo "Invalid Report request, language directory ${1} does not exist."; \
		exit 0; \
	fi
	@if [ `find ${1} -name "*.po" | wc -l` -le "0" ]; then \
		echo "Invalid Report request, no PO files exist for language ${1}."; \
		exit 0; \
	fi
	@mkdir -p tmp/reports
	@cd ${1} && po2sgml --report *.po >& ../tmp/reports/${1}.txt
	@echo "END: report-${1} `date`"
endif
endef

###############################################################################
# Template for Testing
#
# produces phony rules like: test-ko-KR:: xml-ko-KR.
# Parameters:
#	1: Language (ko-KR, bn-IN etc)
###############################################################################

define	TEST_Template
.PHONY:	test-${1}
test-${1}:: xml-${1}
	@echo "START: test-${1} `date`"
ifeq "${1}" "$(findstring ${1},$(IGNORED_TRANSLATIONS))"
	@echo "	Bypassing translation test for ${1}"
	@cp -rf tmp/$(XML_LANG)/* tmp/${1}/.
else
	@$(CATALOGS) xmllint --noout --postvalid --xinclude tmp/${1}/xml/$(DOCNAME).xml
endif
ifeq "${1}" "$(XML_LANG)"
	@echo
	@echo "*Start: Words Of Interest*";
	@for file in `find $(XML_LANG) -name *.xml`; do \
		aspell --list --mode=sgml --add-sgml-skip={$(ASPELL_EXCLUDES)} < $$$$file ; \
	done | sort -u;
	@echo "*End: Words Of Interest*";
	@echo
endif
	@echo "END: test-${1} `date`"
endef


###############################################################################
# Desktop RPMS
###############################################################################

define	TARDIR_Template
.PHONY:	tardir-${1}
tardir-${1}:: xml-${1}
	@echo "START: tardir-${1} `date`"
	@mkdir -p tmp/tar/$(SPEC_NAME)-${1}-$(VERSION)
	@cp -rf tmp/${1}/xml tmp/tar/$(SPEC_NAME)-${1}-$(VERSION)/${1}
	@rm -rf tmp/tar/$(SPEC_NAME)-${1}-$(VERSION)/${1}/Common_Content
	@cp Makefile tmp/tar/$(SPEC_NAME)-${1}-$(VERSION)/.
	@sed -i -e 's/^XML_LANG.*$$$$/XML_LANG = ${1}/' tmp/tar/$(SPEC_NAME)-${1}-$(VERSION)/Makefile
	@sed -i -e 's/^IGNORED_TRANSLATIONS.*$$$$//' tmp/tar/$(SPEC_NAME)-${1}-$(VERSION)/Makefile
	@echo "END: tardir-${1} `date`"
endef

define	TAR_Template
.PHONY:	tar-${1}
tar-${1}:: tardir-${1}
	@echo "START: tar-${1} `date`"
	@cd tmp/tar && tar --create --gzip --exclude-from=$(COMMON_CONFIG)/make/tar-excludes --file $(SPEC_NAME)-${1}-$(VERSION)-$(RELEASE).tgz $(SPEC_NAME)-${1}-$(VERSION)
	@echo "The archive is in tmp/tar/$(SPEC_NAME)-${1}-$(VERSION)-$(RELEASE).tgz"
	@echo "END: tar-${1} `date`"
endef

define	SPEC_Template
.PHONY:	spec-${1}
spec-${1}:: tar-${1}
	@echo "START: spec-${1} `date`"
	@rm -f tmp/subpackages.txt tmp/titles.txt tmp/changelog.txt
	@rev_file=`grep -l revhistory $(XML_LANG)/* | sed -e 's/$(XML_LANG)\///g'`; \
		$(CATALOGS) $(XSLTPROC) $(COMMON_CONFIG)/xsl/changelog.xsl tmp/${1}/xml/$$$$rev_file > tmp/changelog.txt
	@$(CATALOGS) $(XSLTPROC) --path "$(PWD)" --stringparam book-title "$(SPEC_NAME)" \
	--stringparam main-file "$(DOCNAME).xml" \
	--stringparam book-lang "${1}" \
	--stringparam book-log "$$(<tmp/changelog.txt)" \
	-o tmp/$(SPEC_NAME)-${1}.spec \
	$(SPEC_XSL) tmp/${1}/xml/$(DOC_TYPE)_Info.xml
	@echo "END: spec-${1} `date`"
endef

define	SRPM_Template
.PHONY:	srpm-${1}
srpm-${1}:: clean spec-${1}
	@echo "START: srpm-${1} `date`"
	@mkdir -p tmp/rpm/SPECS tmp/rpm/SOURCES tmp/rpm/SRPMS
	@cp tmp/tar/$(SPEC_NAME)-${1}-$(VERSION)-$(RELEASE).tgz tmp/rpm/SOURCES/.
	@rpmbuild --define "_topdir $(PWD)/tmp/rpm" -bs tmp/$(SPEC_NAME)-${1}.spec
	@echo "END: srpm-${1} `date`"
endef

define	BREW_Template
.PHONY:	brew-${1}
brew-${1}:: srpm-${1}
	@echo "START: brew-${1} `date`"
	@brew build --nowait $(BREW_DIST) tmp/rpm/SRPMS/$(SPEC_NAME)-${1}-$(VERSION).src.rpm
	@echo "END: brew-${1} `date`"
endef

define	BREW_Scratch_Template
.PHONY:	brew-scratch-${1}
brew-scratch-${1}:: srpm-${1}
	@echo "START: brew-scratch-${1} `date`"
	@brew build --scratch $(BREW_DIST) tmp/rpm/SRPMS/$(SPEC_NAME)-${1}-$(VERSION).src.rpm
	@echo "END: brew-scratch-${1} `date`"
endef

define	BREW_Report_Template
.PHONY:	brew-report-${1}
brew-report-${1}::
	@echo "START: brew-report-${1} `date`"
	@brew latest-pkg $(BREW_DIST) $(DOCNAME)-${1}
	@echo "END: brew-report-${1} `date`"
endef

###############################################################################
# Template for Web SRPMS
#
# produces phony rules like: web-srpm-en-US
#
# Parameters:
#	1: Lang en-US, ja-JP, etc)
#
###############################################################################

define	WEB_SRPM_Template
.PHONY:	web-srpm-${1}
web-srpm-${1}:: clean tardir-${1}
	@echo "START: web-srpm-${1} `date`"
	@mv tmp/tar/$(SPEC_NAME)-${1}-$(VERSION) tmp/tar/$(PRODUCT)-$(DOCNAME)-$(VERSION)-web-${1}-$(RELEASE)
	@cd tmp/tar && tar --create --gzip --exclude-from=$(COMMON_CONFIG)/make/tar-excludes --file $(PRODUCT)-$(DOCNAME)-$(VERSION)-web-${1}-$(RELEASE)-0.tgz $(PRODUCT)-$(DOCNAME)-$(VERSION)-web-${1}-$(RELEASE)
	@mkdir -p tmp/rpm/SPECS tmp/rpm/SOURCES tmp/rpm/SRPMS
	@cp tmp/tar/$(PRODUCT)-$(DOCNAME)-$(VERSION)-web-${1}-$(RELEASE)-0.tgz tmp/rpm/SOURCES/.
	@rev_file=`grep -l revhistory $(XML_LANG)/* | sed -e 's/$(XML_LANG)\///g'`; \
		$(CATALOGS) $(XSLTPROC) $(COMMON_CONFIG)/xsl/changelog.xsl tmp/${1}/xml/$$$$rev_file > tmp/changelog.txt
	@$(CATALOGS) $(XSLTPROC)  --path "$(PWD)" --stringparam book-title "$(PRODUCT)-$(DOCNAME)-$(VERSION)-web-${1}" \
		--stringparam lang "${1}" \
		--stringparam  prod "$(PRODUCT)" \
		--stringparam  ver "$(VERSION)" \
		--stringparam  docname "$(DOCNAME)" \
		--stringparam book-log "$$(<tmp/changelog.txt)" \
		--stringparam brand "publican-$(LC_BRAND)" \
		-o tmp/$(PRODUCT)-$(DOCNAME)-$(VERSION)-web-${1}.spec \
		$(COMMON_CONFIG)/xsl/web-spec.xsl tmp/${1}/xml/$(DOC_TYPE)_Info.xml
	@rpmbuild --define "_topdir $(PWD)/tmp/rpm" -bs tmp/$(PRODUCT)-$(DOCNAME)-$(VERSION)-web-${1}.spec
	@echo "END: web-srpm-${1} `date`"
endef

# BUGBUG No PDF for Indic languages!
define	Publish-WEB_Template
.PHONY:	publish-web-${1}
publish-web-${1}:: EMBEDTOC = 1
ifeq "-IN" "$(findstring -IN,${1})"
publish-web-${1}:: publish-html-${1} publish-html-single-${1}
else
publish-web-${1}:: publish-html-${1} publish-html-single-${1} publish-pdf-${1}
endif
endef

define	WEB_BREW_Template
.PHONY:	web-brew-${1}
web-brew-${1}:: web-srpm-${1}
	@echo "START: web-brew-${1} `date`"
	@brew build --nowait $(WEB_BREW_DIST) tmp/rpm/SRPMS/$(PRODUCT)-$(DOCNAME)-$(VERSION)-web-${1}-$(RELEASE)-0.src.rpm
	@echo "END: brew-${1} `date`"
endef

define	WEB_BREW_Scratch_Template
.PHONY:	web-brew-scratch-${1}
web-brew-scratch-${1}:: web-srpm-${1}
	@echo "START: web-brew-scratch-${1} `date`"
	@brew build --scratch $(WEB_BREW_DIST) tmp/rpm/SRPMS/$(PRODUCT)-$(DOCNAME)-$(VERSION)-web-${1}-$(RELEASE)-0.src.rpm
	@echo "END: brew-scratch-${1} `date`"
endef


define	WEB_BREW_Report_Template
.PHONY:	web-brew-report-${1}
web-brew-report-${1}::
	@echo "START: web-brew-report-${1} `date`"
	@brew latest-pkg $(WEB_BREW_DIST) $(PRODUCT)-$(DOCNAME)-$(VERSION)-web-${1}
	@echo "END: brew-report-${1} `date`"
endef


